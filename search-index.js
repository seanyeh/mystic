crystal_doc_search_index_callback({"repository_name":"mystic","body":"# mystic.cr\n\n![CI](https://github.com/seanyeh/mystic.cr/actions/workflows/ci.yml/badge.svg)\n\nMystic is a music theory library for Crystal. It provides classes and methods\nfor many music applications.\n\n### Features:\n* Notes\n* Intervals\n* Scales\n* Chords\n* Set theory (pitch classes and pitch class sets)\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     mystic:\n       github: seanyeh/mystic.cr\n   ```\n\n2. Run `shards install`\n\n## Usage\n\nHere is some sample code showing what you can do with mystic. Check out the [docs](https://seanyeh.github.io/mystic.cr/) for a complete API reference.\n```crystal\nrequire \"mystic\"\n\n# Notes\ng5 = Mystic::Note.new(\"g5\")\nc4 = Mystic::Note.new(\"C\") # default octave is 4\n\n# Intervals\np12 = g5 - c4 # Interval of a Perfect 12th\np5 = p12.simple # Interval of a Perfect 5th\np4 = p5.invert # Interval of a Perfect 4th\n\ni = Mystic::Interval.new(\"m-2\") # Descending minor 2nd\na4 = p5 + i # Interval of an Augmented 4th\n\n# Scales\ng_lydian = Mystic::Scale.new(g5, \"lydian\")\ng_lydian.note_names\n# => [\"G\", \"A\", \"B\", \"C#\", \"D\", \"E\", \"F#\"]\n\na_lydian = scale + Mystic::Interval.new(\"M2\") # Transpose up a M2\n\n# Chords\neb4 = Mystic::Note.new(\"Eb\")\ng4 = Mystic::Note.new(\"G\")\ncm = Mystic::Chord.new([c4, eb4, g4])\n\ncm.quality # => \"minor\"\ncm == Mystic::Chord.new(c4, \"minor\") # => true\ncm.get(3) # Gets the 3rd of the chord (Note object Eb4)\n\ncm.invert.notes\n# => Note objects Eb4, G4, C5\n\nMystic::Chord.new(\"Cmb9#11\").note_names\n# => [\"C\", \"Eb\", \"G\", \"Bb\", \"Db\", \"F#\"]\n\nMystic::Chord.new(c4, \"mystic\").note_names\n# => [\"C\", \"F#\", \"Bb\", \"E\", \"A\", \"D\"]\n\n# Set Theory\npc_set = Mystic::Chord.new(\"F#\").pitch_class_set # PitchClassSet of [6, 10, 1]\npc_set.prime_form\n# => PitchClassSet of [0, 3, 7]\n\npc_set.interval_vector\n# => [0, 0, 1, 1, 1, 0]\n\npc_set.forte_number\n# => \"3-11B\"\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/seanyeh/mystic.cr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Sean Yeh](https://github.com/seanyeh) - creator and maintainer\n","program":{"html_id":"mystic/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"mystic","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"mystic/Mystic","path":"Mystic.html","kind":"module","full_name":"Mystic","name":"Mystic","abstract":false,"locations":[{"filename":"src/mystic.cr","line_number":3,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic.cr#L3"},{"filename":"src/mystic/chord.cr","line_number":25,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L25"}],"repository_name":"mystic","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"types":[{"html_id":"mystic/Mystic/Chord","path":"Mystic/Chord.html","kind":"class","full_name":"Mystic::Chord","name":"Chord","abstract":false,"superclass":{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mystic/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mystic/chord.cr","line_number":25,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L25"}],"repository_name":"mystic","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ALIASES","name":"ALIASES","value":"{dominant: \"dominant seventh\", diminished: \"fully diminished\", \"augmented dominant seventh\": \"augmented seventh\"}"},{"id":"INTERVAL_QUALITIES","name":"INTERVAL_QUALITIES","value":"QUALITY_INTERVALS.to_h.invert"},{"id":"QUALITY_INTERVALS","name":"QUALITY_INTERVALS","value":"{major: [\"M3\", \"P5\"], minor: [\"m3\", \"P5\"], diminished: [\"m3\", \"d5\"], augmented: [\"M3\", \"A5\"], \"major seventh\": [\"M3\", \"P5\", \"M7\"], \"dominant seventh\": [\"M3\", \"P5\", \"m7\"], \"minor seventh\": [\"m3\", \"P5\", \"m7\"], \"minor major seventh\": [\"m3\", \"P5\", \"M7\"], \"half diminished seventh\": [\"m3\", \"d5\", \"m7\"], \"fully diminished seventh\": [\"m3\", \"d5\", \"d7\"], \"augmented seventh\": [\"M3\", \"A5\", \"m7\"], \"augmented major seventh\": [\"M3\", \"A5\", \"M7\"], mystic: [\"A4\", \"m7\", \"M10\", \"M13\", \"M16\"]}"}],"namespace":{"html_id":"mystic/Mystic","kind":"module","full_name":"Mystic","name":"Mystic"},"doc":"Represents a chord\n\nA chord has a root note, intervals (indicating the intervals above the root in root position),\nand an array of notes\n\nSome ways to create a Chord:\n```\n# Create with root note and quality\nChord.new(Note.new(\"C4\"), \"major\")\n\n# Create a chord with notes. The lowest will be assumed to be the root\n# (C major)\nChord.new([Note.new(\"C4\"), Note.new(\"E4\"), Note.new(\"G4\")])\n\n# Create with root note and notes\n# (C major, 1st inversion)\nChord.new(Note.new(\"C4\"), [Note.new(\"E4\"), Note.new(\"G4\"), Note.new(\"C5\")])\n\n# Create chord with custom intervals\nChord.new(Note.new(\"C4\"), [Interval.new(\"M2\"), Interval.new(\"P5\")])\n\n# Shorthand with chord symbols\nChord.new(\"Cmb9#11\")\n```","summary":"<p>Represents a chord</p>","constructors":[{"html_id":"new(root:Mystic::Note,intervals:Array(Interval),notes:Array(Note)|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"::Mystic::Note"},{"name":"intervals","external_name":"intervals","restriction":"Array(Interval)"},{"name":"notes","default_value":"nil","external_name":"notes","restriction":"Array(Note) | Nil"}],"args_string":"(root : Mystic::Note, intervals : Array(Interval), notes : Array(Note) | Nil = nil)","args_html":"(root : <a href=\"../Mystic/Note.html\">Mystic::Note</a>, intervals : Array(<a href=\"../Mystic/Interval.html\">Interval</a>), notes : Array(<a href=\"../Mystic/Note.html\">Note</a>) | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/mystic/chord.cr","line_number":56,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L56"},"def":{"name":"new","args":[{"name":"root","external_name":"root","restriction":"::Mystic::Note"},{"name":"intervals","external_name":"intervals","restriction":"Array(Interval)"},{"name":"notes","default_value":"nil","external_name":"notes","restriction":"Array(Note) | Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(root, intervals, notes)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(root:Mystic::Note,notes:Array(Note))-class-method","name":"new","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"::Mystic::Note"},{"name":"notes","external_name":"notes","restriction":"Array(Note)"}],"args_string":"(root : Mystic::Note, notes : Array(Note))","args_html":"(root : <a href=\"../Mystic/Note.html\">Mystic::Note</a>, notes : Array(<a href=\"../Mystic/Note.html\">Note</a>))","location":{"filename":"src/mystic/chord.cr","line_number":66,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L66"},"def":{"name":"new","args":[{"name":"root","external_name":"root","restriction":"::Mystic::Note"},{"name":"notes","external_name":"notes","restriction":"Array(Note)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(root, notes)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(root:Mystic::Note,quality:String,notes:Array(Note)|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"::Mystic::Note"},{"name":"quality","external_name":"quality","restriction":"String"},{"name":"notes","default_value":"nil","external_name":"notes","restriction":"Array(Note) | Nil"}],"args_string":"(root : Mystic::Note, quality : String, notes : Array(Note) | Nil = nil)","args_html":"(root : <a href=\"../Mystic/Note.html\">Mystic::Note</a>, quality : String, notes : Array(<a href=\"../Mystic/Note.html\">Note</a>) | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/mystic/chord.cr","line_number":71,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L71"},"def":{"name":"new","args":[{"name":"root","external_name":"root","restriction":"::Mystic::Note"},{"name":"quality","external_name":"quality","restriction":"String"},{"name":"notes","default_value":"nil","external_name":"notes","restriction":"Array(Note) | Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(root, quality, notes)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(notes:Array(Note))-class-method","name":"new","abstract":false,"args":[{"name":"notes","external_name":"notes","restriction":"Array(Note)"}],"args_string":"(notes : Array(Note))","args_html":"(notes : Array(<a href=\"../Mystic/Note.html\">Note</a>))","location":{"filename":"src/mystic/chord.cr","line_number":61,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L61"},"def":{"name":"new","args":[{"name":"notes","external_name":"notes","restriction":"Array(Note)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(notes)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(s:String)-class-method","name":"new","abstract":false,"args":[{"name":"s","external_name":"s","restriction":"String"}],"args_string":"(s : String)","args_html":"(s : String)","location":{"filename":"src/mystic/chord.cr","line_number":82,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L82"},"def":{"name":"new","args":[{"name":"s","external_name":"s","restriction":"String"}],"visibility":"Public","body":"ChordParser.parse(s)"}}],"instance_methods":[{"html_id":"+(interval:Interval):Chord-instance-method","name":"+","abstract":false,"args":[{"name":"interval","external_name":"interval","restriction":"Interval"}],"args_string":"(interval : Interval) : Chord","args_html":"(interval : <a href=\"../Mystic/Interval.html\">Interval</a>) : <a href=\"../Mystic/Chord.html\">Chord</a>","location":{"filename":"src/mystic/chord.cr","line_number":188,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L188"},"def":{"name":"+","args":[{"name":"interval","external_name":"interval","restriction":"Interval"}],"return_type":"Chord","visibility":"Public","body":"new_notes = notes.map do |n|\n  n + interval\nend\nnew_root = root + interval\nChord.new(new_root, intervals: intervals, notes: new_notes)\n"}},{"html_id":"==(other:self):Bool-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/mystic/chord.cr","line_number":195,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L195"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"root = (other.root && (intervals == other.intervals)) && (notes == other.notes)"}},{"html_id":"bass:Note-instance-method","name":"bass","doc":"Returns the lowest note","summary":"<p>Returns the lowest note</p>","abstract":false,"location":{"filename":"src/mystic/chord.cr","line_number":93,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L93"},"def":{"name":"bass","return_type":"Note","visibility":"Public","body":"notes.first"}},{"html_id":"get(member:Int32):Note|Nil-instance-method","name":"get","doc":"Return the given *member*\n\nFor example, chord.get(3) will return the 3rd of the chord","summary":"<p>Return the given <em>member</em></p>","abstract":false,"args":[{"name":"member","external_name":"member","restriction":"Int32"}],"args_string":"(member : Int32) : Note | Nil","args_html":"(member : Int32) : <a href=\"../Mystic/Note.html\">Note</a> | Nil","location":{"filename":"src/mystic/chord.cr","line_number":180,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L180"},"def":{"name":"get","args":[{"name":"member","external_name":"member","restriction":"Int32"}],"return_type":"Note | Nil","visibility":"Public","body":"intervals_from_root = intervals.select do |interval|\n  interval.value == member\nend\nif intervals_from_root.empty?\n  raise(Error.new(\"Chord member #{member} not in chord\"))\nend\nget(intervals_from_root.first)\n"}},{"html_id":"get(interval_from_root:Interval):Note|Nil-instance-method","name":"get","doc":"Return the member of the chord given a specific *interval_from_root*.\n\nThis is a more specific version of Chord#get(member).\nThis is useful if a chord has multiple notes with the same member number.\n\nFor example:\n```\n# Split 3rd chord (has 2 \"3rds\")\nchord = Chord.new([Note.new(\"C4\"), Note.new(\"Eb4\"), Note.new(\"E4\"), Note.new(\"G4\")])\nchord.get(Interval.new(\"M3\")) # => Note.new(\"E4\")\n```","summary":"<p>Return the member of the chord given a specific <em>interval_from_root</em>.</p>","abstract":false,"args":[{"name":"interval_from_root","external_name":"interval_from_root","restriction":"Interval"}],"args_string":"(interval_from_root : Interval) : Note | Nil","args_html":"(interval_from_root : <a href=\"../Mystic/Interval.html\">Interval</a>) : <a href=\"../Mystic/Note.html\">Note</a> | Nil","location":{"filename":"src/mystic/chord.cr","line_number":168,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L168"},"def":{"name":"get","args":[{"name":"interval_from_root","external_name":"interval_from_root","restriction":"Interval"}],"return_type":"Note | Nil","visibility":"Public","body":"if !(intervals.includes?(interval_from_root))\n  raise(Error.new(\"Interval #{interval_from_root} not in chord\"))\nend\nnote_name = (root + interval_from_root).name\nnotes.find do |n|\n  n.name == note_name\nend\n"}},{"html_id":"intervals:Array(Interval)-instance-method","name":"intervals","abstract":false,"location":{"filename":"src/mystic/chord.cr","line_number":27,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L27"},"def":{"name":"intervals","return_type":"Array(Interval)","visibility":"Public","body":"@intervals"}},{"html_id":"inversion:Int32-instance-method","name":"inversion","doc":"Returns the inversion number, or 0 if in root position","summary":"<p>Returns the inversion number, or 0 if in root position</p>","abstract":false,"location":{"filename":"src/mystic/chord.cr","line_number":98,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L98"},"def":{"name":"inversion","return_type":"Int32","visibility":"Public","body":"(root_position.notes.index(bass)) || -1"}},{"html_id":"invert(num:Int32,keep_root=true):Chord-instance-method","name":"invert","doc":"Returns the result of inverting the chord *num* times (upwards)","summary":"<p>Returns the result of inverting the chord <em>num</em> times (upwards)</p>","abstract":false,"args":[{"name":"num","external_name":"num","restriction":"Int32"},{"name":"keep_root","default_value":"true","external_name":"keep_root","restriction":""}],"args_string":"(num : Int32, keep_root = true) : Chord","args_html":"(num : Int32, keep_root = <span class=\"n\">true</span>) : <a href=\"../Mystic/Chord.html\">Chord</a>","location":{"filename":"src/mystic/chord.cr","line_number":134,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L134"},"def":{"name":"invert","args":[{"name":"num","external_name":"num","restriction":"Int32"},{"name":"keep_root","default_value":"true","external_name":"keep_root","restriction":""}],"return_type":"Chord","visibility":"Public","body":"num.times.reduce(self) do |chord, _|\n  chord.invert(keep_root: keep_root)\nend"}},{"html_id":"invert(keep_root=true):Chord-instance-method","name":"invert","doc":"Returns the result of inverting the chord once (upwards).\nIf *keep_root* is true, will maintain the same root note if inverted back to root position.\nThis will result in all the notes shifting down some number of octave(s).\nOtherwise, the resulting chord will have a higher root note if inverted back to root position","summary":"<p>Returns the result of inverting the chord once (upwards).</p>","abstract":false,"args":[{"name":"keep_root","default_value":"true","external_name":"keep_root","restriction":""}],"args_string":"(keep_root = true) : Chord","args_html":"(keep_root = <span class=\"n\">true</span>) : <a href=\"../Mystic/Chord.html\">Chord</a>","location":{"filename":"src/mystic/chord.cr","line_number":106,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L106"},"def":{"name":"invert","args":[{"name":"keep_root","default_value":"true","external_name":"keep_root","restriction":""}],"return_type":"Chord","visibility":"Public","body":"new_notes = notes.dup\nold_bass = new_notes.shift\nwhile old_bass < new_notes.first\n  old_bass = old_bass + OCTAVE\nend\nnew_notes.push(old_bass)\nnew_root = root\nnew_bass = new_notes.first\nif (new_bass.name == root.name) && new_bass > new_root\n  if keep_root\n    offset = new_bass - new_root\n    new_notes = new_notes.map do |n|\n      n - offset\n    end\n  else\n    new_root = new_bass.dup\n  end\nend\nChord.new(new_root, notes: new_notes, intervals: intervals)\n"}},{"html_id":"name:String-instance-method","name":"name","abstract":false,"location":{"filename":"src/mystic/chord.cr","line_number":149,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L149"},"def":{"name":"name","return_type":"String","visibility":"Public","body":"\"#{root.name} #{quality}\""}},{"html_id":"note_names:Array(String)-instance-method","name":"note_names","abstract":false,"location":{"filename":"src/mystic/chord.cr","line_number":153,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L153"},"def":{"name":"note_names","return_type":"Array(String)","visibility":"Public","body":"notes.map(&.name)"}},{"html_id":"notes:Array(Note)-instance-method","name":"notes","abstract":false,"location":{"filename":"src/mystic/chord.cr","line_number":28,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L28"},"def":{"name":"notes","return_type":"Array(Note)","visibility":"Public","body":"@notes"}},{"html_id":"pitch_class_set:PitchClassSet-instance-method","name":"pitch_class_set","doc":"Returns the `PitchClassSet` of the notes","summary":"<p>Returns the <code><a href=\"../Mystic/PitchClassSet.html\">PitchClassSet</a></code> of the notes</p>","abstract":false,"location":{"filename":"src/mystic/chord.cr","line_number":145,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L145"},"def":{"name":"pitch_class_set","return_type":"PitchClassSet","visibility":"Public","body":"PitchClassSet.new(notes.map(&.pitch_class))"}},{"html_id":"quality:String-instance-method","name":"quality","doc":"Returns the chord quality","summary":"<p>Returns the chord quality</p>","abstract":false,"location":{"filename":"src/mystic/chord.cr","line_number":87,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L87"},"def":{"name":"quality","return_type":"String","visibility":"Public","body":"intervals_string = intervals.map(&.to_s)\n(INTERVAL_QUALITIES[intervals_string]? || \"unknown\").to_s\n"}},{"html_id":"root:Note-instance-method","name":"root","abstract":false,"location":{"filename":"src/mystic/chord.cr","line_number":26,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L26"},"def":{"name":"root","return_type":"Note","visibility":"Public","body":"@root"}},{"html_id":"root_position:Chord-instance-method","name":"root_position","doc":"Returns the root position of the chord","summary":"<p>Returns the root position of the chord</p>","abstract":false,"location":{"filename":"src/mystic/chord.cr","line_number":139,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord.cr#L139"},"def":{"name":"root_position","return_type":"Chord","visibility":"Public","body":"notes = [root] + intervals.map do |interval|\n  root + interval\nend\nChord.new(root, intervals: intervals, notes: notes)\n"}}]},{"html_id":"mystic/Mystic/ChordParser","path":"Mystic/ChordParser.html","kind":"class","full_name":"Mystic::ChordParser","name":"ChordParser","abstract":false,"superclass":{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mystic/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mystic/chord_parser.cr","line_number":2,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord_parser.cr#L2"}],"repository_name":"mystic","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ACCIDENTAL_ALIASES","name":"ACCIDENTAL_ALIASES","value":"{\"+\": \"#\", \"-\": \"b\"}"},{"id":"DEFAULT_ACCIDENTALS","name":"DEFAULT_ACCIDENTALS","value":"{\"2\": \"#\", \"6\": \"#\", \"7\": \"b\", \"9\": \"#\", \"13\": \"#\", \"14\": \"b\"}","doc":"Default accidentals for imperfect intervals","summary":"<p>Default accidentals for imperfect intervals</p>"},{"id":"IMPLIED_MEMBERS","name":"IMPLIED_MEMBERS","value":"{\"9\": [7], \"11\": [7, 9], \"13\": [7, 9, 11]}"}],"namespace":{"html_id":"mystic/Mystic","kind":"module","full_name":"Mystic","name":"Mystic"},"doc":"Parser for chord symbols","summary":"<p>Parser for chord symbols</p>","class_methods":[{"html_id":"normalize_basic_quality(s:String):String-class-method","name":"normalize_basic_quality","doc":"Return a standardized format for qualities for a given string quality","summary":"<p>Return a standardized format for qualities for a given string quality</p>","abstract":false,"args":[{"name":"s","external_name":"s","restriction":"String"}],"args_string":"(s : String) : String","args_html":"(s : String) : String","location":{"filename":"src/mystic/chord_parser.cr","line_number":41,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord_parser.cr#L41"},"def":{"name":"normalize_basic_quality","args":[{"name":"s","external_name":"s","restriction":"String"}],"return_type":"String","visibility":"Public","body":"if s.downcase.in?([\"maj\", \"ma\"])\n  \"M\"\nelse\n  if s.downcase.in?([\"mi\", \"min\"])\n    \"m\"\n  else\n    s\n  end\nend"}},{"html_id":"parse(s:String):Chord-class-method","name":"parse","doc":"Parse a string chord symbol and return the resulting `Chord`","summary":"<p>Parse a string chord symbol and return the resulting <code><a href=\"../Mystic/Chord.html\">Chord</a></code></p>","abstract":false,"args":[{"name":"s","external_name":"s","restriction":"String"}],"args_string":"(s : String) : Chord","args_html":"(s : String) : <a href=\"../Mystic/Chord.html\">Chord</a>","location":{"filename":"src/mystic/chord_parser.cr","line_number":52,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord_parser.cr#L52"},"def":{"name":"parse","args":[{"name":"s","external_name":"s","restriction":"String"}],"return_type":"Chord","visibility":"Public","body":"pattern = (\"^(?<root>#{Note::NAME_PATTERN})(?<basic_quality>Ma?j?|mi?n?|dim|\\\\+)?(?<seventh>7)?(\\\\((?<ext>.*)\\\\)|(?<ext>.*))$\")\nmatch = (Regex.new(pattern)).match(s)\nif match.nil?\n  raise(Error.new(\"Invalid chord format\"))\nend\nroot_name = match[\"root\"]\nbasic_quality = ChordParser.normalize_basic_quality(match[\"basic_quality\"]? || \"\")\nseventh = match[\"seventh\"]?\nextensions = match[\"ext\"]? || \"\"\ntokens = ChordParser.tokenize_extensions(extensions)\next_intervals = ChordParser.parse_extensions(tokens, has_seventh: !(!seventh))\ntriad_intervals = [] of Interval\nskip_third = tokens.any? do |token|\n  (token.type == Token::SUS) || ((token.type == Token::OMIT) && (token.member == 3))\nend\nskip_fifth = tokens.any? do |token|\n  ((token.type == Token::OMIT) && (token.member == 5)) || ((token.type == Token::EXT) && (token.member == 5))\nend\nthird_quality = basic_quality.in?([\"m\", \"dim\"]) ? \"m3\" : \"M3\"\nfifth_quality = case basic_quality\nwhen \"+\"\n  \"A5\"\nwhen \"dim\"\n  \"d5\"\nelse\n  \"P5\"\nend\nif skip_third\nelse\n  triad_intervals.push(Interval.new(third_quality))\nend\nif skip_fifth\nelse\n  triad_intervals.push(Interval.new(fifth_quality))\nend\nseventh_interval = (if seventh\n  case basic_quality\n  when \"M\", \"+\"\n    Interval.new(\"M7\")\n  when \"dim\"\n    Interval.new(\"d7\")\n  else\n    Interval.new(\"m7\")\n  end\nend)\nroot = Note.new(root_name)\nintervals = (triad_intervals + [seventh_interval].compact) + ext_intervals\nChord.new(root, intervals: intervals)\n"}},{"html_id":"parse_extensions(tokens:Array(Token),has_seventh=false):Array(Interval)-class-method","name":"parse_extensions","doc":"Uses the given *tokens* and returns a list of extended intervals (beyond the 3rd/5th)\n\nWhen *has_seventh* is true, the chord symbol has an explicit 7th,\nso there is no need to add an implied 7th","summary":"<p>Uses the given <em>tokens</em> and returns a list of extended intervals (beyond the 3rd/5th)</p>","abstract":false,"args":[{"name":"tokens","external_name":"tokens","restriction":"Array(Token)"},{"name":"has_seventh","default_value":"false","external_name":"has_seventh","restriction":""}],"args_string":"(tokens : Array(Token), has_seventh = false) : Array(Interval)","args_html":"(tokens : Array(<a href=\"../Mystic/ChordParser/Token.html\">Token</a>), has_seventh = <span class=\"n\">false</span>) : Array(<a href=\"../Mystic/Interval.html\">Interval</a>)","location":{"filename":"src/mystic/chord_parser.cr","line_number":122,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord_parser.cr#L122"},"def":{"name":"parse_extensions","args":[{"name":"tokens","external_name":"tokens","restriction":"Array(Token)"},{"name":"has_seventh","default_value":"false","external_name":"has_seventh","restriction":""}],"return_type":"Array(Interval)","visibility":"Public","body":"max_extension = tokens.compact_map do |token|\n  if (token.type == Token::ADD) || (!(IMPLIED_MEMBERS.has_key?(token.member.to_s)))\n    next\n  end\n  token.member\nend.max? || 0\nimplied_tokens = (IMPLIED_MEMBERS.fetch(max_extension.to_s, [] of Int32)).compact_map do |member|\n  if tokens.any? do |token|\n    token.member == member\n  end\n    next\n  end\n  if has_seventh && (member == 7)\n    next\n  end\n  Token.new(member)\nend\n(tokens + implied_tokens).compact_map do |token|\n  if !token.member?\n    next\n  end\n  member = token.member\n  accidental = ACCIDENTAL_ALIASES.fetch(token.accidental, token.accidental)\n  quality = ChordParser.accidentals_to_quality(member, accidental)\n  Interval.new(\"#{quality}#{member}\")\nend.sort!\n"}},{"html_id":"tokenize_extensions(s:String):Array(Token)-class-method","name":"tokenize_extensions","doc":"Splits the given string into tokens","summary":"<p>Splits the given string into tokens</p>","abstract":false,"args":[{"name":"s","external_name":"s","restriction":"String"}],"args_string":"(s : String) : Array(Token)","args_html":"(s : String) : Array(<a href=\"../Mystic/ChordParser/Token.html\">Token</a>)","location":{"filename":"src/mystic/chord_parser.cr","line_number":150,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord_parser.cr#L150"},"def":{"name":"tokenize_extensions","args":[{"name":"s","external_name":"s","restriction":"String"}],"return_type":"Array(Token)","visibility":"Public","body":"tokens = [] of Token\npattern = \"^(?<prefix>add|no|omit)?(?<accidental>[#♯x𝄪]*|[b♭𝄫]+|[+-])(?<member>[245-9]|1[0-4])|^(?<sus>sus)(?<sus_member>[24]?)\"\ncurrent = s.dup\nwhile !current.empty?\n  match = (Regex.new(pattern)).match(current)\n  if match.nil?\n    raise(\"Invalid extension format #{s}\")\n  end\n  prefix = match[\"prefix\"]?\n  sus = match[\"sus\"]?\n  if sus\n    sus_member = match[\"sus_member\"].presence.try(&.to_i) || 4\n    tokens.push(Token.new(sus_member, type: Token::SUS))\n  else\n    if (prefix == \"omit\") || (prefix == \"no\")\n      member = match[\"member\"].to_i\n      if member.nil?\n        raise(Error.new(\"Interval required for \\\"omit/no\\\"\"))\n      end\n      tokens.push(Token.new(member, type: Token::OMIT))\n    else\n      accidental = match[\"accidental\"]\n      member = match[\"member\"].to_i\n      if member.nil?\n        raise(Error.new(\"Interval required\"))\n      end\n      token_type = prefix == \"add\" ? Token::ADD : Token::EXT\n      tokens.push(Token.new(member, accidental: accidental, type: token_type))\n    end\n  end\n  current = current[match.end..]\nend\ntokens\n"}}],"types":[{"html_id":"mystic/Mystic/ChordParser/Token","path":"Mystic/ChordParser/Token.html","kind":"struct","full_name":"Mystic::ChordParser::Token","name":"Token","abstract":false,"superclass":{"html_id":"mystic/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"mystic/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"mystic/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"mystic/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mystic/chord_parser.cr","line_number":24,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord_parser.cr#L24"}],"repository_name":"mystic","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ADD","name":"ADD","value":"\"add\""},{"id":"EXT","name":"EXT","value":"\"extension\""},{"id":"OMIT","name":"OMIT","value":"\"omit\""},{"id":"SUS","name":"SUS","value":"\"sus\""}],"namespace":{"html_id":"mystic/Mystic/ChordParser","kind":"class","full_name":"Mystic::ChordParser","name":"ChordParser"},"constructors":[{"html_id":"new(member:Int32,accidental:String=\"\",type:String=EXT)-class-method","name":"new","abstract":false,"args":[{"name":"member","external_name":"member","restriction":"Int32"},{"name":"accidental","default_value":"\"\"","external_name":"accidental","restriction":"::String"},{"name":"type","default_value":"EXT","external_name":"type","restriction":"::String"}],"args_string":"(member : Int32, accidental : String = \"\", type : String = EXT)","args_html":"(member : Int32, accidental : String = <span class=\"s\">&quot;&quot;</span>, type : String = <span class=\"t\">EXT</span>)","location":{"filename":"src/mystic/chord_parser.cr","line_number":32,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord_parser.cr#L32"},"def":{"name":"new","args":[{"name":"member","external_name":"member","restriction":"Int32"},{"name":"accidental","default_value":"\"\"","external_name":"accidental","restriction":"::String"},{"name":"type","default_value":"EXT","external_name":"type","restriction":"::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(member, accidental, type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"accidental:String-instance-method","name":"accidental","abstract":false,"location":{"filename":"src/mystic/chord_parser.cr","line_number":25,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord_parser.cr#L25"},"def":{"name":"accidental","visibility":"Public","body":"@accidental"}},{"html_id":"accidental=(accidental:String)-instance-method","name":"accidental=","abstract":false,"args":[{"name":"accidental","external_name":"accidental","restriction":"::String"}],"args_string":"(accidental : String)","args_html":"(accidental : String)","location":{"filename":"src/mystic/chord_parser.cr","line_number":25,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord_parser.cr#L25"},"def":{"name":"accidental=","args":[{"name":"accidental","external_name":"accidental","restriction":"::String"}],"visibility":"Public","body":"@accidental = accidental"}},{"html_id":"member:Int32-instance-method","name":"member","abstract":false,"location":{"filename":"src/mystic/chord_parser.cr","line_number":25,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord_parser.cr#L25"},"def":{"name":"member","visibility":"Public","body":"@member"}},{"html_id":"member=(member:Int32)-instance-method","name":"member=","abstract":false,"args":[{"name":"member","external_name":"member","restriction":"::Int32"}],"args_string":"(member : Int32)","args_html":"(member : Int32)","location":{"filename":"src/mystic/chord_parser.cr","line_number":25,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord_parser.cr#L25"},"def":{"name":"member=","args":[{"name":"member","external_name":"member","restriction":"::Int32"}],"visibility":"Public","body":"@member = member"}},{"html_id":"member?:Bool-instance-method","name":"member?","abstract":false,"location":{"filename":"src/mystic/chord_parser.cr","line_number":35,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord_parser.cr#L35"},"def":{"name":"member?","return_type":"Bool","visibility":"Public","body":"type != OMIT"}},{"html_id":"type:String-instance-method","name":"type","abstract":false,"location":{"filename":"src/mystic/chord_parser.cr","line_number":25,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord_parser.cr#L25"},"def":{"name":"type","visibility":"Public","body":"@type"}},{"html_id":"type=(type:String)-instance-method","name":"type=","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"::String"}],"args_string":"(type : String)","args_html":"(type : String)","location":{"filename":"src/mystic/chord_parser.cr","line_number":25,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/chord_parser.cr#L25"},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"::String"}],"visibility":"Public","body":"@type = type"}}]}]},{"html_id":"mystic/Mystic/Coords","path":"Mystic/Coords.html","kind":"struct","full_name":"Mystic::Coords","name":"Coords","abstract":false,"superclass":{"html_id":"mystic/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"mystic/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"mystic/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"mystic/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mystic/coords.cr","line_number":9,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/coords.cr#L9"}],"repository_name":"mystic","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"mystic/Mystic","kind":"module","full_name":"Mystic","name":"Mystic"},"doc":"Coordinate representation of pitches\n\nPitches are represented by a combination of octaves and fifths away from Middle C\n\nFor example, the C#4 is represented as (-4, 7), and Db4 is (3, -5).\n\nThe benefit of this approach over a semitone-based system is that it is easier to\nkeep track of enharmonic notes, and it also makes interval math much simpler.","summary":"<p>Coordinate representation of pitches</p>","constructors":[{"html_id":"new(octaves:Int32,fifths:Int32)-class-method","name":"new","abstract":false,"args":[{"name":"octaves","external_name":"octaves","restriction":"Int32"},{"name":"fifths","external_name":"fifths","restriction":"Int32"}],"args_string":"(octaves : Int32, fifths : Int32)","args_html":"(octaves : Int32, fifths : Int32)","location":{"filename":"src/mystic/coords.cr","line_number":12,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/coords.cr#L12"},"def":{"name":"new","args":[{"name":"octaves","external_name":"octaves","restriction":"Int32"},{"name":"fifths","external_name":"fifths","restriction":"Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(octaves, fifths)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"*(i:Int32):Coords-instance-method","name":"*","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : Coords","args_html":"(i : Int32) : <a href=\"../Mystic/Coords.html\">Coords</a>","location":{"filename":"src/mystic/coords.cr","line_number":28,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/coords.cr#L28"},"def":{"name":"*","args":[{"name":"i","external_name":"i","restriction":"Int32"}],"return_type":"Coords","visibility":"Public","body":"Coords.new(octaves * i, fifths * i)"}},{"html_id":"+(other:self):Coords-instance-method","name":"+","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Coords","args_html":"(other : <span class=\"k\">self</span>) : <a href=\"../Mystic/Coords.html\">Coords</a>","location":{"filename":"src/mystic/coords.cr","line_number":20,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/coords.cr#L20"},"def":{"name":"+","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Coords","visibility":"Public","body":"Coords.new(octaves + other.octaves, fifths + other.fifths)"}},{"html_id":"-(other:self):Coords-instance-method","name":"-","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Coords","args_html":"(other : <span class=\"k\">self</span>) : <a href=\"../Mystic/Coords.html\">Coords</a>","location":{"filename":"src/mystic/coords.cr","line_number":24,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/coords.cr#L24"},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Coords","visibility":"Public","body":"self + (other * -1)"}},{"html_id":"==(other:self):Bool-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/mystic/coords.cr","line_number":36,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/coords.cr#L36"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"(octaves == other.octaves) && (fifths == other.fifths)"}},{"html_id":"fifths:Int32-instance-method","name":"fifths","abstract":false,"location":{"filename":"src/mystic/coords.cr","line_number":10,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/coords.cr#L10"},"def":{"name":"fifths","visibility":"Public","body":"@fifths"}},{"html_id":"octaves:Int32-instance-method","name":"octaves","abstract":false,"location":{"filename":"src/mystic/coords.cr","line_number":10,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/coords.cr#L10"},"def":{"name":"octaves","visibility":"Public","body":"@octaves"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Same as `#inspect(io)`.","summary":"<p>Same as <code>#inspect(io)</code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/mystic/coords.cr","line_number":32,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/coords.cr#L32"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << \"[#{octaves}, #{fifths}]\""}},{"html_id":"value:Int32-instance-method","name":"value","doc":"Returns the pitch offset from Middle C and can be used to calculate the pitch name","summary":"<p>Returns the pitch offset from Middle C and can be used to calculate the pitch name</p>","abstract":false,"location":{"filename":"src/mystic/coords.cr","line_number":16,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/coords.cr#L16"},"def":{"name":"value","return_type":"Int32","visibility":"Public","body":"(7 * octaves) + (4 * fifths)"}}]},{"html_id":"mystic/Mystic/Error","path":"Mystic/Error.html","kind":"class","full_name":"Mystic::Error","name":"Error","abstract":false,"superclass":{"html_id":"mystic/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"mystic/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mystic/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mystic/error.cr","line_number":1,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/error.cr#L1"}],"repository_name":"mystic","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"mystic/Mystic","kind":"module","full_name":"Mystic","name":"Mystic"}},{"html_id":"mystic/Mystic/ForteNumbers","path":"Mystic/ForteNumbers.html","kind":"class","full_name":"Mystic::ForteNumbers","name":"ForteNumbers","abstract":false,"superclass":{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mystic/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mystic/forte_numbers.cr","line_number":3,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/forte_numbers.cr#L3"}],"repository_name":"mystic","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FORTE_TABLE","name":"FORTE_TABLE","value":"PRIME_TABLE.to_h.invert","doc":"Table of Forte Numbers => Prime Forms","summary":"<p>Table of Forte Numbers =&gt; Prime Forms</p>"},{"id":"PRIME_TABLE","name":"PRIME_TABLE","value":"{[] of Int32 => \"0-1\", [0] => \"1-1\", [0, 1] => \"2-1\", [0, 2] => \"2-2\", [0, 3] => \"2-3\", [0, 4] => \"2-4\", [0, 5] => \"2-5\", [0, 6] => \"2-6\", [0, 1, 2] => \"3-1\", [0, 3, 6] => \"3-10\", [0, 3, 7] => \"3-11A\", [0, 4, 7] => \"3-11B\", [0, 4, 8] => \"3-12\", [0, 1, 3] => \"3-2A\", [0, 2, 3] => \"3-2B\", [0, 1, 4] => \"3-3A\", [0, 3, 4] => \"3-3B\", [0, 1, 5] => \"3-4A\", [0, 4, 5] => \"3-4B\", [0, 1, 6] => \"3-5A\", [0, 5, 6] => \"3-5B\", [0, 2, 4] => \"3-6\", [0, 2, 5] => \"3-7A\", [0, 3, 5] => \"3-7B\", [0, 2, 6] => \"3-8A\", [0, 4, 6] => \"3-8B\", [0, 2, 7] => \"3-9\", [0, 1, 2, 3] => \"4-1\", [0, 2, 3, 5] => \"4-10\", [0, 1, 3, 5] => \"4-11A\", [0, 2, 4, 5] => \"4-11B\", [0, 2, 3, 6] => \"4-12A\", [0, 3, 4, 6] => \"4-12B\", [0, 1, 3, 6] => \"4-13A\", [0, 3, 5, 6] => \"4-13B\", [0, 2, 3, 7] => \"4-14A\", [0, 4, 5, 7] => \"4-14B\", [0, 1, 5, 7] => \"4-16A\", [0, 2, 6, 7] => \"4-16B\", [0, 3, 4, 7] => \"4-17\", [0, 1, 4, 7] => \"4-18A\", [0, 3, 6, 7] => \"4-18B\", [0, 1, 4, 8] => \"4-19A\", [0, 3, 4, 8] => \"4-19B\", [0, 1, 5, 8] => \"4-20\", [0, 2, 4, 6] => \"4-21\", [0, 2, 4, 7] => \"4-22A\", [0, 3, 5, 7] => \"4-22B\", [0, 2, 5, 7] => \"4-23\", [0, 2, 4, 8] => \"4-24\", [0, 2, 6, 8] => \"4-25\", [0, 3, 5, 8] => \"4-26\", [0, 2, 5, 8] => \"4-27A\", [0, 3, 6, 8] => \"4-27B\", [0, 3, 6, 9] => \"4-28\", [0, 1, 2, 4] => \"4-2A\", [0, 2, 3, 4] => \"4-2B\", [0, 1, 3, 4] => \"4-3\", [0, 1, 2, 5] => \"4-4A\", [0, 3, 4, 5] => \"4-4B\", [0, 1, 2, 6] => \"4-5A\", [0, 4, 5, 6] => \"4-5B\", [0, 1, 2, 7] => \"4-6\", [0, 1, 4, 5] => \"4-7\", [0, 1, 5, 6] => \"4-8\", [0, 1, 6, 7] => \"4-9\", [0, 1, 4, 6] => \"4-z15A\", [0, 2, 5, 6] => \"4-z15B\", [0, 1, 3, 7] => \"4-z29A\", [0, 4, 6, 7] => \"4-z29B\", [0, 1, 2, 3, 4] => \"5-1\", [0, 1, 3, 4, 6] => \"5-10A\", [0, 2, 3, 5, 6] => \"5-10B\", [0, 2, 3, 4, 7] => \"5-11A\", [0, 3, 4, 5, 7] => \"5-11B\", [0, 1, 2, 4, 8] => \"5-13A\", [0, 2, 3, 4, 8] => \"5-13B\", [0, 1, 2, 5, 7] => \"5-14A\", [0, 2, 5, 6, 7] => \"5-14B\", [0, 1, 2, 6, 8] => \"5-15\", [0, 1, 3, 4, 7] => \"5-16A\", [0, 3, 4, 6, 7] => \"5-16B\", [0, 1, 3, 6, 7] => \"5-19A\", [0, 1, 4, 6, 7] => \"5-19B\", [0, 1, 5, 6, 8] => \"5-20A\", [0, 2, 3, 7, 8] => \"5-20B\", [0, 1, 4, 5, 8] => \"5-21A\", [0, 3, 4, 7, 8] => \"5-21B\", [0, 1, 4, 7, 8] => \"5-22\", [0, 2, 3, 5, 7] => \"5-23A\", [0, 2, 4, 5, 7] => \"5-23B\", [0, 1, 3, 5, 7] => \"5-24A\", [0, 2, 4, 6, 7] => \"5-24B\", [0, 2, 3, 5, 8] => \"5-25A\", [0, 3, 5, 6, 8] => \"5-25B\", [0, 2, 4, 5, 8] => \"5-26A\", [0, 3, 4, 6, 8] => \"5-26B\", [0, 1, 3, 5, 8] => \"5-27A\", [0, 3, 5, 7, 8] => \"5-27B\", [0, 2, 3, 6, 8] => \"5-28A\", [0, 2, 5, 6, 8] => \"5-28B\", [0, 1, 3, 6, 8] => \"5-29A\", [0, 2, 5, 7, 8] => \"5-29B\", [0, 1, 2, 3, 5] => \"5-2A\", [0, 2, 3, 4, 5] => \"5-2B\", [0, 1, 4, 6, 8] => \"5-30A\", [0, 2, 4, 7, 8] => \"5-30B\", [0, 1, 3, 6, 9] => \"5-31A\", [0, 2, 3, 6, 9] => \"5-31B\", [0, 1, 4, 6, 9] => \"5-32A\", [0, 2, 5, 6, 9] => \"5-32B\", [0, 2, 4, 6, 8] => \"5-33\", [0, 2, 4, 6, 9] => \"5-34\", [0, 2, 4, 7, 9] => \"5-35\", [0, 1, 2, 4, 5] => \"5-3A\", [0, 1, 3, 4, 5] => \"5-3B\", [0, 1, 2, 3, 6] => \"5-4A\", [0, 3, 4, 5, 6] => \"5-4B\", [0, 1, 2, 3, 7] => \"5-5A\", [0, 4, 5, 6, 7] => \"5-5B\", [0, 1, 2, 5, 6] => \"5-6A\", [0, 1, 4, 5, 6] => \"5-6B\", [0, 1, 2, 6, 7] => \"5-7A\", [0, 1, 5, 6, 7] => \"5-7B\", [0, 2, 3, 4, 6] => \"5-8\", [0, 1, 2, 4, 6] => \"5-9A\", [0, 2, 4, 5, 6] => \"5-9B\", [0, 1, 3, 5, 6] => \"5-z12\", [0, 1, 3, 4, 8] => \"5-z17\", [0, 1, 4, 5, 7] => \"5-z18A\", [0, 2, 3, 6, 7] => \"5-z18B\", [0, 1, 2, 4, 7] => \"5-z36A\", [0, 3, 5, 6, 7] => \"5-z36B\", [0, 3, 4, 5, 8] => \"5-z37\", [0, 1, 2, 5, 8] => \"5-z38A\", [0, 3, 6, 7, 8] => \"5-z38B\", [0, 1, 2, 3, 4, 5] => \"6-1\", [0, 1, 3, 4, 5, 8] => \"6-14A\", [0, 3, 4, 5, 7, 8] => \"6-14B\", [0, 1, 2, 4, 5, 8] => \"6-15A\", [0, 3, 4, 6, 7, 8] => \"6-15B\", [0, 1, 4, 5, 6, 8] => \"6-16A\", [0, 2, 3, 4, 7, 8] => \"6-16B\", [0, 1, 2, 5, 7, 8] => \"6-18A\", [0, 1, 3, 6, 7, 8] => \"6-18B\", [0, 1, 4, 5, 8, 9] => \"6-20\", [0, 2, 3, 4, 6, 8] => \"6-21A\", [0, 2, 4, 5, 6, 8] => \"6-21B\", [0, 1, 2, 4, 6, 8] => \"6-22A\", [0, 2, 4, 6, 7, 8] => \"6-22B\", [0, 1, 3, 4, 6, 9] => \"6-27A\", [0, 2, 3, 5, 6, 9] => \"6-27B\", [0, 1, 2, 3, 4, 6] => \"6-2A\", [0, 2, 3, 4, 5, 6] => \"6-2B\", [0, 1, 3, 6, 7, 9] => \"6-30A\", [0, 2, 3, 6, 8, 9] => \"6-30B\", [0, 1, 4, 5, 7, 9] => \"6-31A\", [0, 2, 4, 5, 8, 9] => \"6-31B\", [0, 2, 4, 5, 7, 9] => \"6-32\", [0, 2, 3, 5, 7, 9] => \"6-33A\", [0, 2, 4, 6, 7, 9] => \"6-33B\", [0, 1, 3, 5, 7, 9] => \"6-34A\", [0, 2, 4, 6, 8, 9] => \"6-34B\", [0, 2, 4, 6, 8, 10] => \"6-35\", [0, 1, 2, 3, 6, 7] => \"6-5A\", [0, 1, 4, 5, 6, 7] => \"6-5B\", [0, 1, 2, 6, 7, 8] => \"6-7\", [0, 2, 3, 4, 5, 7] => \"6-8\", [0, 1, 2, 3, 5, 7] => \"6-9A\", [0, 2, 4, 5, 6, 7] => \"6-9B\", [0, 1, 3, 4, 5, 7] => \"6-z10A\", [0, 2, 3, 4, 6, 7] => \"6-z10B\", [0, 1, 2, 4, 5, 7] => \"6-z11A\", [0, 2, 3, 5, 6, 7] => \"6-z11B\", [0, 1, 2, 4, 6, 7] => \"6-z12A\", [0, 1, 3, 5, 6, 7] => \"6-z12B\", [0, 1, 3, 4, 6, 7] => \"6-z13\", [0, 1, 2, 4, 7, 8] => \"6-z17A\", [0, 1, 4, 6, 7, 8] => \"6-z17B\", [0, 1, 3, 4, 7, 8] => \"6-z19A\", [0, 1, 4, 5, 7, 8] => \"6-z19B\", [0, 2, 3, 5, 6, 8] => \"6-z23\", [0, 1, 3, 4, 6, 8] => \"6-z24A\", [0, 2, 4, 5, 7, 8] => \"6-z24B\", [0, 1, 3, 5, 6, 8] => \"6-z25A\", [0, 2, 3, 5, 7, 8] => \"6-z25B\", [0, 1, 3, 5, 7, 8] => \"6-z26\", [0, 1, 3, 5, 6, 9] => \"6-z28\", [0, 2, 3, 6, 7, 9] => \"6-z29\", [0, 1, 2, 3, 4, 7] => \"6-z36A\", [0, 3, 4, 5, 6, 7] => \"6-z36B\", [0, 1, 2, 3, 4, 8] => \"6-z37\", [0, 1, 2, 3, 7, 8] => \"6-z38\", [0, 2, 3, 4, 5, 8] => \"6-z39A\", [0, 3, 4, 5, 6, 8] => \"6-z39B\", [0, 1, 2, 3, 5, 6] => \"6-z3A\", [0, 1, 3, 4, 5, 6] => \"6-z3B\", [0, 1, 2, 4, 5, 6] => \"6-z4\", [0, 1, 2, 3, 5, 8] => \"6-z40A\", [0, 3, 5, 6, 7, 8] => \"6-z40B\", [0, 1, 2, 3, 6, 8] => \"6-z41A\", [0, 2, 5, 6, 7, 8] => \"6-z41B\", [0, 1, 2, 3, 6, 9] => \"6-z42\", [0, 1, 2, 5, 6, 8] => \"6-z43A\", [0, 2, 3, 6, 7, 8] => \"6-z43B\", [0, 1, 2, 5, 6, 9] => \"6-z44A\", [0, 1, 4, 5, 6, 9] => \"6-z44B\", [0, 2, 3, 4, 6, 9] => \"6-z45\", [0, 1, 2, 4, 6, 9] => \"6-z46A\", [0, 2, 4, 5, 6, 9] => \"6-z46B\", [0, 1, 2, 4, 7, 9] => \"6-z47A\", [0, 2, 3, 4, 7, 9] => \"6-z47B\", [0, 1, 2, 5, 7, 9] => \"6-z48\", [0, 1, 3, 4, 7, 9] => \"6-z49\", [0, 1, 4, 6, 7, 9] => \"6-z50\", [0, 1, 2, 5, 6, 7] => \"6-z6\", [0, 1, 2, 3, 4, 5, 6] => \"7-1\", [0, 1, 2, 3, 4, 6, 9] => \"7-10A\", [0, 2, 3, 4, 5, 6, 9] => \"7-10B\", [0, 1, 3, 4, 5, 6, 8] => \"7-11A\", [0, 2, 3, 4, 5, 7, 8] => \"7-11B\", [0, 1, 2, 4, 5, 6, 8] => \"7-13A\", [0, 2, 3, 4, 6, 7, 8] => \"7-13B\", [0, 1, 2, 3, 5, 7, 8] => \"7-14A\", [0, 1, 3, 5, 6, 7, 8] => \"7-14B\", [0, 1, 2, 4, 6, 7, 8] => \"7-15\", [0, 1, 2, 3, 5, 6, 9] => \"7-16A\", [0, 1, 3, 4, 5, 6, 9] => \"7-16B\", [0, 1, 2, 3, 6, 7, 9] => \"7-19A\", [0, 1, 2, 3, 6, 8, 9] => \"7-19B\", [0, 1, 2, 5, 6, 7, 9] => \"7-20A\", [0, 2, 3, 4, 7, 8, 9] => \"7-20B\", [0, 1, 2, 4, 5, 8, 9] => \"7-21A\", [0, 1, 3, 4, 5, 8, 9] => \"7-21B\", [0, 1, 2, 5, 6, 8, 9] => \"7-22\", [0, 2, 3, 4, 5, 7, 9] => \"7-23A\", [0, 2, 4, 5, 6, 7, 9] => \"7-23B\", [0, 1, 2, 3, 5, 7, 9] => \"7-24A\", [0, 2, 4, 6, 7, 8, 9] => \"7-24B\", [0, 2, 3, 4, 6, 7, 9] => \"7-25A\", [0, 2, 3, 5, 6, 7, 9] => \"7-25B\", [0, 1, 3, 4, 5, 7, 9] => \"7-26A\", [0, 2, 4, 5, 6, 8, 9] => \"7-26B\", [0, 1, 2, 4, 5, 7, 9] => \"7-27A\", [0, 2, 4, 5, 7, 8, 9] => \"7-27B\", [0, 1, 3, 5, 6, 7, 9] => \"7-28A\", [0, 2, 3, 4, 6, 8, 9] => \"7-28B\", [0, 1, 2, 4, 6, 7, 9] => \"7-29A\", [0, 2, 3, 5, 7, 8, 9] => \"7-29B\", [0, 1, 2, 3, 4, 5, 7] => \"7-2A\", [0, 2, 3, 4, 5, 6, 7] => \"7-2B\", [0, 1, 2, 4, 6, 8, 9] => \"7-30A\", [0, 1, 3, 5, 7, 8, 9] => \"7-30B\", [0, 1, 3, 4, 6, 7, 9] => \"7-31A\", [0, 2, 3, 5, 6, 8, 9] => \"7-31B\", [0, 1, 3, 4, 6, 8, 9] => \"7-32A\", [0, 1, 3, 5, 6, 8, 9] => \"7-32B\", [0, 1, 2, 4, 6, 8, 10] => \"7-33\", [0, 1, 3, 4, 6, 8, 10] => \"7-34\", [0, 1, 3, 5, 6, 8, 10] => \"7-35\", [0, 1, 2, 3, 4, 5, 8] => \"7-3A\", [0, 3, 4, 5, 6, 7, 8] => \"7-3B\", [0, 1, 2, 3, 4, 6, 7] => \"7-4A\", [0, 1, 3, 4, 5, 6, 7] => \"7-4B\", [0, 1, 2, 3, 5, 6, 7] => \"7-5A\", [0, 1, 2, 4, 5, 6, 7] => \"7-5B\", [0, 1, 2, 3, 4, 7, 8] => \"7-6A\", [0, 1, 4, 5, 6, 7, 8] => \"7-6B\", [0, 1, 2, 3, 6, 7, 8] => \"7-7A\", [0, 1, 2, 5, 6, 7, 8] => \"7-7B\", [0, 2, 3, 4, 5, 6, 8] => \"7-8\", [0, 1, 2, 3, 4, 6, 8] => \"7-9A\", [0, 2, 4, 5, 6, 7, 8] => \"7-9B\", [0, 1, 2, 3, 4, 7, 9] => \"7-z12\", [0, 1, 2, 4, 5, 6, 9] => \"7-z17\", [0, 1, 4, 5, 6, 7, 9] => \"7-z18A\", [0, 2, 3, 4, 5, 8, 9] => \"7-z18B\", [0, 1, 2, 3, 5, 6, 8] => \"7-z36A\", [0, 2, 3, 5, 6, 7, 8] => \"7-z36B\", [0, 1, 3, 4, 5, 7, 8] => \"7-z37\", [0, 1, 2, 4, 5, 7, 8] => \"7-z38A\", [0, 1, 3, 4, 6, 7, 8] => \"7-z38B\", [0, 1, 2, 3, 4, 5, 6, 7] => \"8-1\", [0, 2, 3, 4, 5, 6, 7, 9] => \"8-10\", [0, 1, 2, 3, 4, 5, 7, 9] => \"8-11A\", [0, 2, 4, 5, 6, 7, 8, 9] => \"8-11B\", [0, 1, 3, 4, 5, 6, 7, 9] => \"8-12A\", [0, 2, 3, 4, 5, 6, 8, 9] => \"8-12B\", [0, 1, 2, 3, 4, 6, 7, 9] => \"8-13A\", [0, 2, 3, 5, 6, 7, 8, 9] => \"8-13B\", [0, 1, 2, 4, 5, 6, 7, 9] => \"8-14A\", [0, 2, 3, 4, 5, 7, 8, 9] => \"8-14B\", [0, 1, 2, 3, 5, 7, 8, 9] => \"8-16A\", [0, 1, 2, 4, 6, 7, 8, 9] => \"8-16B\", [0, 1, 3, 4, 5, 6, 8, 9] => \"8-17\", [0, 1, 2, 3, 5, 6, 8, 9] => \"8-18A\", [0, 1, 3, 4, 6, 7, 8, 9] => \"8-18B\", [0, 1, 2, 4, 5, 6, 8, 9] => \"8-19A\", [0, 1, 3, 4, 5, 7, 8, 9] => \"8-19B\", [0, 1, 2, 4, 5, 7, 8, 9] => \"8-20\", [0, 1, 2, 3, 4, 6, 8, 10] => \"8-21\", [0, 1, 2, 3, 5, 6, 8, 10] => \"8-22A\", [0, 1, 3, 4, 5, 6, 8, 10] => \"8-22B\", [0, 1, 2, 3, 5, 7, 8, 10] => \"8-23\", [0, 1, 2, 4, 5, 6, 8, 10] => \"8-24\", [0, 1, 2, 4, 6, 7, 8, 10] => \"8-25\", [0, 1, 3, 4, 5, 7, 8, 10] => \"8-26\", [0, 1, 2, 4, 5, 7, 8, 10] => \"8-27A\", [0, 1, 3, 4, 6, 7, 8, 10] => \"8-27B\", [0, 1, 3, 4, 6, 7, 9, 10] => \"8-28\", [0, 1, 2, 3, 4, 5, 6, 8] => \"8-2A\", [0, 2, 3, 4, 5, 6, 7, 8] => \"8-2B\", [0, 1, 2, 3, 4, 5, 6, 9] => \"8-3\", [0, 1, 2, 3, 4, 5, 7, 8] => \"8-4A\", [0, 1, 3, 4, 5, 6, 7, 8] => \"8-4B\", [0, 1, 2, 3, 4, 6, 7, 8] => \"8-5A\", [0, 1, 2, 4, 5, 6, 7, 8] => \"8-5B\", [0, 1, 2, 3, 5, 6, 7, 8] => \"8-6\", [0, 1, 2, 3, 4, 5, 8, 9] => \"8-7\", [0, 1, 2, 3, 4, 7, 8, 9] => \"8-8\", [0, 1, 2, 3, 6, 7, 8, 9] => \"8-9\", [0, 1, 2, 3, 4, 6, 8, 9] => \"8-z15A\", [0, 1, 3, 5, 6, 7, 8, 9] => \"8-z15B\", [0, 1, 2, 3, 5, 6, 7, 9] => \"8-z29A\", [0, 2, 3, 4, 6, 7, 8, 9] => \"8-z29B\", [0, 1, 2, 3, 4, 5, 6, 7, 8] => \"9-1\", [0, 1, 2, 3, 4, 6, 7, 9, 10] => \"9-10\", [0, 1, 2, 3, 5, 6, 7, 9, 10] => \"9-11A\", [0, 1, 2, 4, 5, 6, 7, 9, 10] => \"9-11B\", [0, 1, 2, 4, 5, 6, 8, 9, 10] => \"9-12\", [0, 1, 2, 3, 4, 5, 6, 7, 9] => \"9-2A\", [0, 2, 3, 4, 5, 6, 7, 8, 9] => \"9-2B\", [0, 1, 2, 3, 4, 5, 6, 8, 9] => \"9-3A\", [0, 1, 3, 4, 5, 6, 7, 8, 9] => \"9-3B\", [0, 1, 2, 3, 4, 5, 7, 8, 9] => \"9-4A\", [0, 1, 2, 4, 5, 6, 7, 8, 9] => \"9-4B\", [0, 1, 2, 3, 4, 6, 7, 8, 9] => \"9-5A\", [0, 1, 2, 3, 5, 6, 7, 8, 9] => \"9-5B\", [0, 1, 2, 3, 4, 5, 6, 8, 10] => \"9-6\", [0, 1, 2, 3, 4, 5, 7, 8, 10] => \"9-7A\", [0, 1, 3, 4, 5, 6, 7, 8, 10] => \"9-7B\", [0, 1, 2, 3, 4, 6, 7, 8, 10] => \"9-8A\", [0, 1, 2, 4, 5, 6, 7, 8, 10] => \"9-8B\", [0, 1, 2, 3, 5, 6, 7, 8, 10] => \"9-9\", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] => \"10-1\", [0, 1, 2, 3, 4, 5, 6, 7, 8, 10] => \"10-2\", [0, 1, 2, 3, 4, 5, 6, 7, 9, 10] => \"10-3\", [0, 1, 2, 3, 4, 5, 6, 8, 9, 10] => \"10-4\", [0, 1, 2, 3, 4, 5, 7, 8, 9, 10] => \"10-5\", [0, 1, 2, 3, 4, 6, 7, 8, 9, 10] => \"10-6\", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] => \"11-1\", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] => \"12-1\"}","doc":"Table of Prime Forms => Forte Numbers\n(Technically, this table splits prime forms into the non-inverted and inverted forms)","summary":"<p>Table of Prime Forms =&gt; Forte Numbers (Technically, this table splits prime forms into the non-inverted and inverted forms)</p>"}],"namespace":{"html_id":"mystic/Mystic","kind":"module","full_name":"Mystic","name":"Mystic"},"doc":"Table of prime forms and Forte numbers,\nretrieved from https://en.wikipedia.org/wiki/List_of_set_classes","summary":"<p>Table of prime forms and Forte numbers, retrieved from https://en.wikipedia.org/wiki/List_of_set_classes</p>"},{"html_id":"mystic/Mystic/Interval","path":"Mystic/Interval.html","kind":"class","full_name":"Mystic::Interval","name":"Interval","abstract":false,"superclass":{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mystic/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mystic/interval.cr","line_number":15,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L15"}],"repository_name":"mystic","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BASE_SEMITONES","name":"BASE_SEMITONES","value":"[0, 2, 3, 5, 7, 8, 10]"},{"id":"INTERVAL_COORDS","name":"INTERVAL_COORDS","value":"{\"1\": Coords.new(0, 0), \"2\": Coords.new(3, -5), \"3\": Coords.new(2, -3), \"4\": Coords.new(1, -1), \"5\": Coords.new(0, 1), \"6\": Coords.new(3, -4), \"7\": Coords.new(2, -2), \"8\": Coords.new(1, 0)}"},{"id":"QUALITY_SEMITONE_OFFSETS","name":"QUALITY_SEMITONE_OFFSETS","value":"{P: 0, m: 0, M: 1, A: 1, d: -1}"},{"id":"SHARP_COORDS","name":"SHARP_COORDS","value":"Coords.new(-4, 7)"}],"namespace":{"html_id":"mystic/Mystic","kind":"module","full_name":"Mystic","name":"Mystic"},"doc":"Represents an interval\n\nTo create an Interval:\n```\n# Ascending Major 3rd\nInterval.new(\"M3\")\n\n# Descending intervals have a negative value\n# Descending Perfect 5th\nInterval.new(\"P-5\")\n```\nAvailable qualities are:\nM (major), m (minor), P (perfect), d (diminished), A (augmented).\nGoing further is also possible, for example dd (doubly diminished) and AAA (triply augmented)","summary":"<p>Represents an interval</p>","constructors":[{"html_id":"from_coords(coords:Coords):Interval-class-method","name":"from_coords","abstract":false,"args":[{"name":"coords","external_name":"coords","restriction":"Coords"}],"args_string":"(coords : Coords) : Interval","args_html":"(coords : <a href=\"../Mystic/Coords.html\">Coords</a>) : <a href=\"../Mystic/Interval.html\">Interval</a>","location":{"filename":"src/mystic/interval.cr","line_number":62,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L62"},"def":{"name":"from_coords","args":[{"name":"coords","external_name":"coords","restriction":"Coords"}],"return_type":"Interval","visibility":"Public","body":"fifths, value = coords.fifths, coords.value\nalterations = (fifths.abs + 1).tdiv(7)\ndirection = value >= 0 ? 1 : -1\nfifths_direction = fifths >= 0 ? 1 : -1\nif value == 0\n  direction = fifths_direction\nend\nsimple_value = (value.abs % 7) + 1\nis_perfect = Util.perfect?(simple_value)\nalteration_increasing = direction.positive? == fifths.positive?\nif !is_perfect\n  alterations = alterations + 1\nend\noffset = alteration_increasing ? alterations : -1 * alterations\nquality = Util.offset_to_quality(offset, is_perfect: is_perfect)\nInterval.new(quality, value + direction)\n"}},{"html_id":"new(s:String)-class-method","name":"new","abstract":false,"args":[{"name":"s","external_name":"s","restriction":"String"}],"args_string":"(s : String)","args_html":"(s : String)","location":{"filename":"src/mystic/interval.cr","line_number":46,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L46"},"def":{"name":"new","args":[{"name":"s","external_name":"s","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(s)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"+(other:self):Interval-instance-method","name":"+","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Interval","args_html":"(other : <span class=\"k\">self</span>) : <a href=\"../Mystic/Interval.html\">Interval</a>","location":{"filename":"src/mystic/interval.cr","line_number":181,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L181"},"def":{"name":"+","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Interval","visibility":"Public","body":"Interval.from_coords(coords + other.coords)"}},{"html_id":"+(note:Note):Note-instance-method","name":"+","doc":"Adding intervals to notes is defined in the Note class","summary":"<p>Adding intervals to notes is defined in the Note class</p>","abstract":false,"args":[{"name":"note","external_name":"note","restriction":"Note"}],"args_string":"(note : Note) : Note","args_html":"(note : <a href=\"../Mystic/Note.html\">Note</a>) : <a href=\"../Mystic/Note.html\">Note</a>","location":{"filename":"src/mystic/interval.cr","line_number":190,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L190"},"def":{"name":"+","args":[{"name":"note","external_name":"note","restriction":"Note"}],"return_type":"Note","visibility":"Public","body":"note + self"}},{"html_id":"-(other:self):Interval-instance-method","name":"-","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Interval","args_html":"(other : <span class=\"k\">self</span>) : <a href=\"../Mystic/Interval.html\">Interval</a>","location":{"filename":"src/mystic/interval.cr","line_number":185,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L185"},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Interval","visibility":"Public","body":"self + other.reverse"}},{"html_id":"<(other:self):Bool-instance-method","name":"<","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/mystic/interval.cr","line_number":203,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L203"},"def":{"name":"<","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"(self <=> other) == -1"}},{"html_id":"<=>(other:self):Int32-instance-method","name":"<=>","doc":"Note: this compares intervals as ordered on a staff rather than by pitch.\nFor example, an A2 < d3 even though an A2 spans more semitones\nAlso note: this compares magnitude only, so direction is not taken into account","summary":"<p>Note: this compares intervals as ordered on a staff rather than by pitch.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Int32","args_html":"(other : <span class=\"k\">self</span>) : Int32","location":{"filename":"src/mystic/interval.cr","line_number":197,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L197"},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Int32","visibility":"Public","body":"if number != other.number\n  return number <=> other.number\nend\nquality_offset <=> other.quality_offset\n"}},{"html_id":"==(other:self):Bool-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/mystic/interval.cr","line_number":211,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L211"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"(quality == other.quality) && (value == other.value)"}},{"html_id":">(other:self):Bool-instance-method","name":">","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/mystic/interval.cr","line_number":207,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L207"},"def":{"name":">","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"(self <=> other) == 1"}},{"html_id":"compound?:Bool-instance-method","name":"compound?","doc":"Returns if compound (greater than an octave)","summary":"<p>Returns if compound (greater than an octave)</p>","abstract":false,"location":{"filename":"src/mystic/interval.cr","line_number":116,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L116"},"def":{"name":"compound?","return_type":"Bool","visibility":"Public","body":"!simple?"}},{"html_id":"coords:Coords-instance-method","name":"coords","doc":"Returns `Coords` representation","summary":"<p>Returns <code><a href=\"../Mystic/Coords.html\">Coords</a></code> representation</p>","abstract":false,"location":{"filename":"src/mystic/interval.cr","line_number":93,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L93"},"def":{"name":"coords","return_type":"Coords","visibility":"Public","body":"octave_offset = Coords.new(octaves, 0)\nbase_coords = INTERVAL_COORDS[simple.number.to_s]\n((base_coords + (SHARP_COORDS * quality_offset)) + octave_offset) * direction\n"}},{"html_id":"direction:Int32-instance-method","name":"direction","doc":"Returns 1 if ascending and -1 if descending","summary":"<p>Returns 1 if ascending and -1 if descending</p>","abstract":false,"location":{"filename":"src/mystic/interval.cr","line_number":106,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L106"},"def":{"name":"direction","return_type":"Int32","visibility":"Public","body":"value >= 0 ? 1 : -1"}},{"html_id":"invert:self-instance-method","name":"invert","doc":"Returns the inversion\nIf compound, returns the inversion of the simple form","summary":"<p>Returns the inversion If compound, returns the inversion of the simple form</p>","abstract":false,"location":{"filename":"src/mystic/interval.cr","line_number":146,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L146"},"def":{"name":"invert","return_type":"self","visibility":"Public","body":"new_value = 9 - simple.number\nnew_quality = case quality\nwhen \"P\"\n  \"P\"\nwhen \"m\"\n  \"M\"\nwhen \"M\"\n  \"m\"\nwhen .includes?(\"A\")\n  \"d\" * quality.size\nwhen .includes?(\"d\")\n  \"A\" * quality.size\nelse\n  raise(Error.new(\"Cannot invert unknown quality: #{quality}\"))\nend\nInterval.new(new_quality, direction * new_value)\n"}},{"html_id":"number:Int32-instance-method","name":"number","doc":"Returns the (positive) number","summary":"<p>Returns the (positive) number</p>","abstract":false,"location":{"filename":"src/mystic/interval.cr","line_number":101,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L101"},"def":{"name":"number","return_type":"Int32","visibility":"Public","body":"value.abs"}},{"html_id":"octaves:Int32-instance-method","name":"octaves","doc":"Returns number of octaves above the simple interval\nNote: an octave is considered a simple interval","summary":"<p>Returns number of octaves above the simple interval Note: an octave is considered a simple interval</p>","abstract":false,"location":{"filename":"src/mystic/interval.cr","line_number":122,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L122"},"def":{"name":"octaves","return_type":"Int32","visibility":"Public","body":"(number - 2).tdiv(7)"}},{"html_id":"quality:String-instance-method","name":"quality","abstract":false,"location":{"filename":"src/mystic/interval.cr","line_number":16,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L16"},"def":{"name":"quality","return_type":"String","visibility":"Public","body":"@quality"}},{"html_id":"quality_offset:Int32-instance-method","name":"quality_offset","doc":"Returns the accidental offset based on the quality","summary":"<p>Returns the accidental offset based on the quality</p>","abstract":false,"location":{"filename":"src/mystic/interval.cr","line_number":164,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L164"},"def":{"name":"quality_offset","return_type":"Int32","visibility":"Public","body":"number_perfect = Util.perfect?(simple.number)\naugmented_imperfect_offset = (!number_perfect) && (quality.includes?(\"A\")) ? 1 : 0\naugmented_imperfect_offset + quality.chars.sum do |c|\n  QUALITY_SEMITONE_OFFSETS[c.to_s]\nend\n"}},{"html_id":"reverse:Interval-instance-method","name":"reverse","doc":"Returns the same interval going in the opposite direction","summary":"<p>Returns the same interval going in the opposite direction</p>","abstract":false,"location":{"filename":"src/mystic/interval.cr","line_number":140,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L140"},"def":{"name":"reverse","return_type":"Interval","visibility":"Public","body":"Interval.new(quality, -1 * value)"}},{"html_id":"semitones:Int32-instance-method","name":"semitones","doc":"Returns the number of semitones the interval spans","summary":"<p>Returns the number of semitones the interval spans</p>","abstract":false,"location":{"filename":"src/mystic/interval.cr","line_number":174,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L174"},"def":{"name":"semitones","return_type":"Int32","visibility":"Public","body":"base_semitone = BASE_SEMITONES[simple.number - 1]\nabsolute_semitones = (octaves * 12) + (base_semitone + quality_offset)\ndirection * absolute_semitones\n"}},{"html_id":"simple:Interval-instance-method","name":"simple","doc":"Returns the simple form","summary":"<p>Returns the simple form</p>","abstract":false,"location":{"filename":"src/mystic/interval.cr","line_number":127,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L127"},"def":{"name":"simple","return_type":"Interval","visibility":"Public","body":"if simple?\n  return self\nend\nsimple_number = ((number - 1) % 7) + 1\nif simple_number == 1\n  simple_number = 8\nend\nsimple_value = direction * simple_number\nInterval.new(quality, simple_value)\n"}},{"html_id":"simple?:Bool-instance-method","name":"simple?","doc":"Returns if simple (an octave or smaller)","summary":"<p>Returns if simple (an octave or smaller)</p>","abstract":false,"location":{"filename":"src/mystic/interval.cr","line_number":111,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L111"},"def":{"name":"simple?","return_type":"Bool","visibility":"Public","body":"number <= 8"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/mystic/interval.cr","line_number":215,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L215"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << \"#{quality}#{value}\""}},{"html_id":"value:Int32-instance-method","name":"value","abstract":false,"location":{"filename":"src/mystic/interval.cr","line_number":17,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/interval.cr#L17"},"def":{"name":"value","return_type":"Int32","visibility":"Public","body":"@value"}}]},{"html_id":"mystic/Mystic/Note","path":"Mystic/Note.html","kind":"class","full_name":"Mystic::Note","name":"Note","abstract":false,"superclass":{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mystic/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mystic/note.cr","line_number":21,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L21"}],"repository_name":"mystic","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ALL_PITCHES","name":"ALL_PITCHES","value":"[\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]"},{"id":"BASE_OCTAVE","name":"BASE_OCTAVE","value":"4","doc":"Coordinates assume starting from C4","summary":"<p>Coordinates assume starting from C4</p>"},{"id":"LETTER_PITCH_CLASSES","name":"LETTER_PITCH_CLASSES","value":"{C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11}"},{"id":"NAME_PATTERN","name":"NAME_PATTERN","value":"\"(?<letter>[abcdefgABCDEFG])(?<accidental>[b♭𝄫]+|[#♯x𝄪]*)\"","doc":"Regex pattern for a note name","summary":"<p>Regex pattern for a note name</p>"},{"id":"PITCH_COORDS","name":"PITCH_COORDS","value":"{C: Coords.new(0, 0), D: Coords.new(-1, 2), E: Coords.new(-2, 4), F: Coords.new(1, -1), G: Coords.new(0, 1), A: Coords.new(-1, 3), B: Coords.new(-2, 5)}"},{"id":"PITCHES","name":"PITCHES","value":"[\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]"}],"namespace":{"html_id":"mystic/Mystic","kind":"module","full_name":"Mystic","name":"Mystic"},"doc":"Represents a note, consisting of a note name (letter and accidental) and octave\n\nTo create a Note:\n\n```\n# Middle C\nNote.new(\"C4\")\n\n# Middle C. Octave defaults to 4 if not provided\nNote.new(\"C\")\n\n# Middle C\n# In the case of accidentals, will default to using sharps.\nNote.from_midi(60)\n\n# The A above middle C\n# This is used internally and may be less useful for most end users.\n# See `Coords` for more information on Coordinate representation of pitches\nNote.from_coords(Coords.new(-1, 3))\n```","summary":"<p>Represents a note, consisting of a note name (letter and accidental) and octave</p>","class_methods":[{"html_id":"from_midi(i:Int32)-class-method","name":"from_midi","doc":"Returns a note corresponding to a given midi value","summary":"<p>Returns a note corresponding to a given midi value</p>","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32)","args_html":"(i : Int32)","location":{"filename":"src/mystic/note.cr","line_number":76,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L76"},"def":{"name":"from_midi","args":[{"name":"i","external_name":"i","restriction":"Int32"}],"visibility":"Public","body":"octave = (i.tdiv(12)) - 1\npitch_class = i % 12\nNote.new(\"#{ALL_PITCHES[pitch_class]}#{octave}\")\n"}}],"constructors":[{"html_id":"from_coords(coords:Coords):self-class-method","name":"from_coords","doc":"Returns a note corresponding to a given `Coords`","summary":"<p>Returns a note corresponding to a given <code><a href=\"../Mystic/Coords.html\">Coords</a></code></p>","abstract":false,"args":[{"name":"coords","external_name":"coords","restriction":"Coords"}],"args_string":"(coords : Coords) : self","args_html":"(coords : <a href=\"../Mystic/Coords.html\">Coords</a>) : <span class=\"k\">self</span>","location":{"filename":"src/mystic/note.cr","line_number":84,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L84"},"def":{"name":"from_coords","args":[{"name":"coords","external_name":"coords","restriction":"Coords"}],"return_type":"self","visibility":"Public","body":"fifths, value = coords.fifths, coords.value\nletter = PITCHES[value % 7]\noctave_offset = value // 7\noctave = BASE_OCTAVE + octave_offset\nuse_sharps = coords.fifths.positive?\naccidental_offset = (if use_sharps\n  (fifths.abs + 1).tdiv(7)\nelse\n  -1 * ((fifths.abs + 5).tdiv(7))\nend)\naccidental = Util.normalize_accidental(accidental_offset)\nNote.new(letter, accidental, octave)\n"}},{"html_id":"new(s:String)-class-method","name":"new","doc":"Returns a note corresponding to a given string representation","summary":"<p>Returns a note corresponding to a given string representation</p>","abstract":false,"args":[{"name":"s","external_name":"s","restriction":"String"}],"args_string":"(s : String)","args_html":"(s : String)","location":{"filename":"src/mystic/note.cr","line_number":63,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L63"},"def":{"name":"new","args":[{"name":"s","external_name":"s","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(s)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"+(interval:Interval):Note-instance-method","name":"+","abstract":false,"args":[{"name":"interval","external_name":"interval","restriction":"Interval"}],"args_string":"(interval : Interval) : Note","args_html":"(interval : <a href=\"../Mystic/Interval.html\">Interval</a>) : <a href=\"../Mystic/Note.html\">Note</a>","location":{"filename":"src/mystic/note.cr","line_number":144,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L144"},"def":{"name":"+","args":[{"name":"interval","external_name":"interval","restriction":"Interval"}],"return_type":"Note","visibility":"Public","body":"Note.from_coords(coords + interval.coords)"}},{"html_id":"-(interval:Interval):Note-instance-method","name":"-","abstract":false,"args":[{"name":"interval","external_name":"interval","restriction":"Interval"}],"args_string":"(interval : Interval) : Note","args_html":"(interval : <a href=\"../Mystic/Interval.html\">Interval</a>) : <a href=\"../Mystic/Note.html\">Note</a>","location":{"filename":"src/mystic/note.cr","line_number":148,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L148"},"def":{"name":"-","args":[{"name":"interval","external_name":"interval","restriction":"Interval"}],"return_type":"Note","visibility":"Public","body":"Note.from_coords(coords - interval.coords)"}},{"html_id":"-(other:self):Interval-instance-method","name":"-","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Interval","args_html":"(other : <span class=\"k\">self</span>) : <a href=\"../Mystic/Interval.html\">Interval</a>","location":{"filename":"src/mystic/note.cr","line_number":152,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L152"},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Interval","visibility":"Public","body":"Interval.from_coords(coords - other.coords)"}},{"html_id":"<(other:self):Bool-instance-method","name":"<","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/mystic/note.cr","line_number":167,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L167"},"def":{"name":"<","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"(self <=> other) == -1"}},{"html_id":"<=>(other:self):Int32-instance-method","name":"<=>","doc":"Note: this compares notes as ordered on a staff rather than by pitch.\n\nFor example, a Cx4 < Db4 even though Cx4 sounds higher.","summary":"<p>Note: this compares notes as ordered on a staff rather than by pitch.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Int32","args_html":"(other : <span class=\"k\">self</span>) : Int32","location":{"filename":"src/mystic/note.cr","line_number":159,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L159"},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Int32","visibility":"Public","body":"if octave != other.octave\n  return octave <=> other.octave\nend\nif letter != other.letter\n  return LETTER_PITCH_CLASSES[letter] <=> LETTER_PITCH_CLASSES[other.letter]\nend\naccidental_offset <=> other.accidental_offset\n"}},{"html_id":"==(other:self):Bool-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/mystic/note.cr","line_number":175,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L175"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"((letter == other.letter) && (accidental == other.accidental)) && (octave == other.octave)"}},{"html_id":">(other:self):Bool-instance-method","name":">","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/mystic/note.cr","line_number":171,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L171"},"def":{"name":">","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"(self <=> other) == 1"}},{"html_id":"accidental:String-instance-method","name":"accidental","abstract":false,"location":{"filename":"src/mystic/note.cr","line_number":23,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L23"},"def":{"name":"accidental","return_type":"String","visibility":"Public","body":"@accidental"}},{"html_id":"accidental_offset:Int32-instance-method","name":"accidental_offset","abstract":false,"location":{"filename":"src/mystic/note.cr","line_number":140,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L140"},"def":{"name":"accidental_offset","return_type":"Int32","visibility":"Public","body":"Util.accidental_offset(accidental)"}},{"html_id":"chroma:Int32-instance-method","name":"chroma","doc":"Returns the numerical pitch class (0-11)","summary":"<p>Returns the numerical pitch class (0-11)</p>","abstract":false,"location":{"filename":"src/mystic/note.cr","line_number":121,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L121"},"def":{"name":"chroma","return_type":"Int32","visibility":"Public","body":"(LETTER_PITCH_CLASSES[letter] + accidental_offset) % 12"}},{"html_id":"coords:Coords-instance-method","name":"coords","doc":"Returns `Coords` representation","summary":"<p>Returns <code><a href=\"../Mystic/Coords.html\">Coords</a></code> representation</p>","abstract":false,"location":{"filename":"src/mystic/note.cr","line_number":109,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L109"},"def":{"name":"coords","return_type":"Coords","visibility":"Public","body":"octave_offset = Coords.new(octave - BASE_OCTAVE, 0)\nbase_coords = PITCH_COORDS[letter]\n(base_coords + (Interval::SHARP_COORDS * accidental_offset)) + octave_offset\n"}},{"html_id":"frequency(tuning=440.0):Float64-instance-method","name":"frequency","doc":"Returns the frequency in Hz","summary":"<p>Returns the frequency in Hz</p>","abstract":false,"args":[{"name":"tuning","default_value":"440.0","external_name":"tuning","restriction":""}],"args_string":"(tuning = 440.0) : Float64","args_html":"(tuning = <span class=\"n\">440.0</span>) : Float64","location":{"filename":"src/mystic/note.cr","line_number":136,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L136"},"def":{"name":"frequency","args":[{"name":"tuning","default_value":"440.0","external_name":"tuning","restriction":""}],"return_type":"Float64","visibility":"Public","body":"tuning * (Math.exp2((midi - 69) / 12))"}},{"html_id":"letter:String-instance-method","name":"letter","abstract":false,"location":{"filename":"src/mystic/note.cr","line_number":22,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L22"},"def":{"name":"letter","return_type":"String","visibility":"Public","body":"@letter"}},{"html_id":"midi:Int32-instance-method","name":"midi","doc":"Returns the midi value","summary":"<p>Returns the midi value</p>","abstract":false,"location":{"filename":"src/mystic/note.cr","line_number":131,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L131"},"def":{"name":"midi","return_type":"Int32","visibility":"Public","body":"(12 * (octave + 1)) + chroma"}},{"html_id":"name:String-instance-method","name":"name","abstract":false,"location":{"filename":"src/mystic/note.cr","line_number":116,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L116"},"def":{"name":"name","return_type":"String","visibility":"Public","body":"\"#{letter}#{accidental}\""}},{"html_id":"octave:Int32-instance-method","name":"octave","abstract":false,"location":{"filename":"src/mystic/note.cr","line_number":24,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L24"},"def":{"name":"octave","return_type":"Int32","visibility":"Public","body":"@octave"}},{"html_id":"pitch_class:PitchClass-instance-method","name":"pitch_class","doc":"Returns the `PitchClass`","summary":"<p>Returns the <code><a href=\"../Mystic/PitchClass.html\">PitchClass</a></code></p>","abstract":false,"location":{"filename":"src/mystic/note.cr","line_number":126,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L126"},"def":{"name":"pitch_class","return_type":"PitchClass","visibility":"Public","body":"PitchClass.new(chroma)"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/mystic/note.cr","line_number":179,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/note.cr#L179"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << \"#{letter}#{accidental}#{octave}\""}}]},{"html_id":"mystic/Mystic/PitchClass","path":"Mystic/PitchClass.html","kind":"struct","full_name":"Mystic::PitchClass","name":"PitchClass","abstract":false,"superclass":{"html_id":"mystic/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"mystic/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"mystic/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"mystic/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mystic/pitch_class.cr","line_number":9,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class.cr#L9"}],"repository_name":"mystic","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"mystic/Mystic","kind":"module","full_name":"Mystic","name":"Mystic"},"doc":"Represents a pitch class in Set Theory\n\nTo create a PitchClass:\n\n```\n# C\nPitchClass.new(0)\n```","summary":"<p>Represents a pitch class in Set Theory</p>","constructors":[{"html_id":"new(value:Int32)-class-method","name":"new","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"::Int32"}],"args_string":"(value : Int32)","args_html":"(value : Int32)","location":{"filename":"src/mystic/pitch_class.cr","line_number":12,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class.cr#L12"},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":"::Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"+(i:Int32):PitchClass-instance-method","name":"+","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : PitchClass","args_html":"(i : Int32) : <a href=\"../Mystic/PitchClass.html\">PitchClass</a>","location":{"filename":"src/mystic/pitch_class.cr","line_number":16,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class.cr#L16"},"def":{"name":"+","args":[{"name":"i","external_name":"i","restriction":"Int32"}],"return_type":"PitchClass","visibility":"Public","body":"PitchClass.new((value + i) % 12)"}},{"html_id":"-(i:Int32):PitchClass-instance-method","name":"-","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : PitchClass","args_html":"(i : Int32) : <a href=\"../Mystic/PitchClass.html\">PitchClass</a>","location":{"filename":"src/mystic/pitch_class.cr","line_number":20,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class.cr#L20"},"def":{"name":"-","args":[{"name":"i","external_name":"i","restriction":"Int32"}],"return_type":"PitchClass","visibility":"Public","body":"self + (-i)"}},{"html_id":"-(other:self):Int32-instance-method","name":"-","doc":"Returns the numerical distance from the *other* pitch class","summary":"<p>Returns the numerical distance from the <em>other</em> pitch class</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Int32","args_html":"(other : <span class=\"k\">self</span>) : Int32","location":{"filename":"src/mystic/pitch_class.cr","line_number":25,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class.cr#L25"},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Int32","visibility":"Public","body":"(value - other.value) % 12"}},{"html_id":"<=>(other:self):Int32-instance-method","name":"<=>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Int32","args_html":"(other : <span class=\"k\">self</span>) : Int32","location":{"filename":"src/mystic/pitch_class.cr","line_number":36,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class.cr#L36"},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Int32","visibility":"Public","body":"value <=> other.value"}},{"html_id":"==(other:self):Bool-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/mystic/pitch_class.cr","line_number":40,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class.cr#L40"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"value == other.value"}},{"html_id":"ic_distance(other:self):Int32-instance-method","name":"ic_distance","doc":"Returns the Interval Class distance from the *other* pitch class","summary":"<p>Returns the Interval Class distance from the <em>other</em> pitch class</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Int32","args_html":"(other : <span class=\"k\">self</span>) : Int32","location":{"filename":"src/mystic/pitch_class.cr","line_number":30,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class.cr#L30"},"def":{"name":"ic_distance","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Int32","visibility":"Public","body":"distance = other - self\ndistance > 6 ? 12 - distance : distance\n"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Same as `#inspect(io)`.","summary":"<p>Same as <code>#inspect(io)</code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/mystic/pitch_class.cr","line_number":44,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class.cr#L44"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << value.to_s"}},{"html_id":"value:Int32-instance-method","name":"value","abstract":false,"location":{"filename":"src/mystic/pitch_class.cr","line_number":10,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class.cr#L10"},"def":{"name":"value","return_type":"Int32","visibility":"Public","body":"@value"}}]},{"html_id":"mystic/Mystic/PitchClassSet","path":"Mystic/PitchClassSet.html","kind":"class","full_name":"Mystic::PitchClassSet","name":"PitchClassSet","abstract":false,"superclass":{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mystic/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mystic/pitch_class_set.cr","line_number":15,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L15"}],"repository_name":"mystic","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"mystic/Mystic","kind":"module","full_name":"Mystic","name":"Mystic"},"doc":"Represents a pitch class set in Set Theory\n\nTo create a PitchClass:\n\n```\n# C, E, G\nPitchClass.new([PitchClass.new(0), PitchClass.new(4), PitchClass.new(7)])\n\n# Shorthand\nPitchClass.new([0, 4, 7])\n\n# Can create from a chord\nChord.new(\"C\").pitch_class_set\n```","summary":"<p>Represents a pitch class set in Set Theory</p>","constructors":[{"html_id":"from_forte_number(s:String):PitchClassSet-class-method","name":"from_forte_number","doc":"Returns the pitch class set (in prime form) given the Forte number","summary":"<p>Returns the pitch class set (in prime form) given the Forte number</p>","abstract":false,"args":[{"name":"s","external_name":"s","restriction":"String"}],"args_string":"(s : String) : PitchClassSet","args_html":"(s : String) : <a href=\"../Mystic/PitchClassSet.html\">PitchClassSet</a>","location":{"filename":"src/mystic/pitch_class_set.cr","line_number":28,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L28"},"def":{"name":"from_forte_number","args":[{"name":"s","external_name":"s","restriction":"String"}],"return_type":"PitchClassSet","visibility":"Public","body":"pc_set = ForteNumbers::FORTE_TABLE[s]?\nif pc_set\nelse\n  raise(Error.new(\"Invalid forte number: #{s}\"))\nend\nPitchClassSet.new(pc_set)\n"}},{"html_id":"new(pitch_class_nums:Array(Int32))-class-method","name":"new","abstract":false,"args":[{"name":"pitch_class_nums","external_name":"pitch_class_nums","restriction":"Array(Int32)"}],"args_string":"(pitch_class_nums : Array(Int32))","args_html":"(pitch_class_nums : Array(Int32))","location":{"filename":"src/mystic/pitch_class_set.cr","line_number":22,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L22"},"def":{"name":"new","args":[{"name":"pitch_class_nums","external_name":"pitch_class_nums","restriction":"Array(Int32)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(pitch_class_nums)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(pitch_classes:Array(Mystic::PitchClass))-class-method","name":"new","abstract":false,"args":[{"name":"pitch_classes","external_name":"pitch_classes","restriction":"::Array(::Mystic::PitchClass)"}],"args_string":"(pitch_classes : Array(Mystic::PitchClass))","args_html":"(pitch_classes : Array(<a href=\"../Mystic/PitchClass.html\">Mystic::PitchClass</a>))","location":{"filename":"src/mystic/pitch_class_set.cr","line_number":18,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L18"},"def":{"name":"new","args":[{"name":"pitch_classes","external_name":"pitch_classes","restriction":"::Array(::Mystic::PitchClass)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(pitch_classes)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"+(i:Int32):PitchClassSet-instance-method","name":"+","doc":"Transpose (Tₙ)","summary":"<p>Transpose (Tₙ)</p>","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : PitchClassSet","args_html":"(i : Int32) : <a href=\"../Mystic/PitchClassSet.html\">PitchClassSet</a>","location":{"filename":"src/mystic/pitch_class_set.cr","line_number":148,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L148"},"def":{"name":"+","args":[{"name":"i","external_name":"i","restriction":"Int32"}],"return_type":"PitchClassSet","visibility":"Public","body":"PitchClassSet.new(pitch_classes.map do |pc|\n  pc + i\nend)"}},{"html_id":"-(i:Int32):PitchClassSet-instance-method","name":"-","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : PitchClassSet","args_html":"(i : Int32) : <a href=\"../Mystic/PitchClassSet.html\">PitchClassSet</a>","location":{"filename":"src/mystic/pitch_class_set.cr","line_number":152,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L152"},"def":{"name":"-","args":[{"name":"i","external_name":"i","restriction":"Int32"}],"return_type":"PitchClassSet","visibility":"Public","body":"self + (-i)"}},{"html_id":"<=>(other:self):Int32-instance-method","name":"<=>","doc":"The more \"compact\" pitch class set is considered less than the other\n\n\"Compactness\" is determined by:\n1. Smallest outer distance\n2. If tie, rightmost largest inner distances\n3. If tie, the pitch class set beginning closest to 0","summary":"<p>The more &quot;compact&quot; pitch class set is considered less than the other</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Int32","args_html":"(other : <span class=\"k\">self</span>) : Int32","location":{"filename":"src/mystic/pitch_class_set.cr","line_number":178,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L178"},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Int32","visibility":"Public","body":"a, b = sort_value, other.sort_value\nif a[:outer_distance] != b[:outer_distance]\n  return a[:outer_distance] <=> b[:outer_distance]\nend\nif a[:inner_distances] != b[:inner_distances]\n  return b[:inner_distances] <=> a[:inner_distances]\nend\nfirst <=> other.first\n"}},{"html_id":"==(other:self):Bool-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/mystic/pitch_class_set.cr","line_number":191,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L191"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"pitch_classes == other.pitch_classes"}},{"html_id":"first:PitchClass-instance-method","name":"first","doc":"Returns the first pitch class","summary":"<p>Returns the first pitch class</p>","abstract":false,"location":{"filename":"src/mystic/pitch_class_set.cr","line_number":118,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L118"},"def":{"name":"first","return_type":"PitchClass","visibility":"Public","body":"pitch_classes.first"}},{"html_id":"forte_number:String-instance-method","name":"forte_number","abstract":false,"location":{"filename":"src/mystic/pitch_class_set.cr","line_number":107,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L107"},"def":{"name":"forte_number","return_type":"String","visibility":"Public","body":"pc_set = normal_form.transpose_to(0)\nForteNumbers::PRIME_TABLE.fetch(pc_set.pitch_class_values, \"invalid\")\n"}},{"html_id":"interval_vector:Array(Int32)-instance-method","name":"interval_vector","doc":"The interval vector (also known as Interval Class Content) shows\nwhich interval classes (with quantities) exist between all pairs of notes.\n\nReturns an array of 6 ints, denoting how many of each interval class (ic) exist.\n\nFor example: an interval vector of [0, 0, 2, 0, 0, 1] means the following:\n1. 2 instances of interval class 3\n2. 1 instance of interval class 6","summary":"<p>The interval vector (also known as Interval Class Content) shows which interval classes (with quantities) exist between all pairs of notes.</p>","abstract":false,"location":{"filename":"src/mystic/pitch_class_set.cr","line_number":89,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L89"},"def":{"name":"interval_vector","return_type":"Array(Int32)","visibility":"Public","body":"pairs = pitch_classes.map_with_index do |pc1, index|\n  pitch_classes[(index + 1)...].map do |pc2|\n    {pc1, pc2}\n  end\nend.flatten\npairs.reduce([0, 0, 0, 0, 0, 0]) do |acc, pair|\n  pc1, pc2 = pair\n  index = (pc1.ic_distance(pc2)) - 1\n  __temp_49 = index\n  acc[__temp_49] = acc[__temp_49] + 1\n  acc\nend\n"}},{"html_id":"invert(axis:PitchClass):PitchClassSet-instance-method","name":"invert","doc":"Returns the inversion around the given *axis*","summary":"<p>Returns the inversion around the given <em>axis</em></p>","abstract":false,"args":[{"name":"axis","external_name":"axis","restriction":"PitchClass"}],"args_string":"(axis : PitchClass) : PitchClassSet","args_html":"(axis : <a href=\"../Mystic/PitchClass.html\">PitchClass</a>) : <a href=\"../Mystic/PitchClassSet.html\">PitchClassSet</a>","location":{"filename":"src/mystic/pitch_class_set.cr","line_number":68,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L68"},"def":{"name":"invert","args":[{"name":"axis","external_name":"axis","restriction":"PitchClass"}],"return_type":"PitchClassSet","visibility":"Public","body":"new_pcs = pitch_classes.map do |pc|\n  axis - (pc - axis)\nend\nPitchClassSet.new(new_pcs)\n"}},{"html_id":"invert(axis:Int32=0):PitchClassSet-instance-method","name":"invert","doc":"Returns the inversion around the given *axis* (defaulting to 0)","summary":"<p>Returns the inversion around the given <em>axis</em> (defaulting to 0)</p>","abstract":false,"args":[{"name":"axis","default_value":"0","external_name":"axis","restriction":"Int32"}],"args_string":"(axis : Int32 = 0) : PitchClassSet","args_html":"(axis : Int32 = <span class=\"n\">0</span>) : <a href=\"../Mystic/PitchClassSet.html\">PitchClassSet</a>","location":{"filename":"src/mystic/pitch_class_set.cr","line_number":77,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L77"},"def":{"name":"invert","args":[{"name":"axis","default_value":"0","external_name":"axis","restriction":"Int32"}],"return_type":"PitchClassSet","visibility":"Public","body":"invert(PitchClass.new(axis))"}},{"html_id":"last:PitchClass-instance-method","name":"last","doc":"Returns the last pitch class","summary":"<p>Returns the last pitch class</p>","abstract":false,"location":{"filename":"src/mystic/pitch_class_set.cr","line_number":123,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L123"},"def":{"name":"last","return_type":"PitchClass","visibility":"Public","body":"pitch_classes.last"}},{"html_id":"normal_form:PitchClassSet-instance-method","name":"normal_form","doc":"Returns the normal form.\n\nThe normal form is the most compact form of a pitch class set","summary":"<p>Returns the normal form.</p>","abstract":false,"location":{"filename":"src/mystic/pitch_class_set.cr","line_number":44,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L44"},"def":{"name":"normal_form","return_type":"PitchClassSet","visibility":"Public","body":"sorted_pitch_classes = pitch_classes.sort\npc_sets = size.times.map do |i|\n  PitchClassSet.new(sorted_pitch_classes[i..] + (sorted_pitch_classes.first(i)))\nend.to_a\npc_sets.sort.first\n"}},{"html_id":"pitch_class_values:Array(Int32)-instance-method","name":"pitch_class_values","doc":"Returns the pitch classes as an array of ints","summary":"<p>Returns the pitch classes as an array of ints</p>","abstract":false,"location":{"filename":"src/mystic/pitch_class_set.cr","line_number":37,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L37"},"def":{"name":"pitch_class_values","return_type":"Array(Int32)","visibility":"Public","body":"pitch_classes.map(&.value)"}},{"html_id":"pitch_classes:Array(PitchClass)-instance-method","name":"pitch_classes","abstract":false,"location":{"filename":"src/mystic/pitch_class_set.cr","line_number":16,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L16"},"def":{"name":"pitch_classes","return_type":"Array(PitchClass)","visibility":"Public","body":"@pitch_classes"}},{"html_id":"prime_form:PitchClassSet-instance-method","name":"prime_form","doc":"Returns the prime form.\n\nThe prime form is calculated by:\n1. Finding the more compact version of either the normal form or inverted normal form\n2. Transposing it to start from 0","summary":"<p>Returns the prime form.</p>","abstract":false,"location":{"filename":"src/mystic/pitch_class_set.cr","line_number":59,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L59"},"def":{"name":"prime_form","return_type":"PitchClassSet","visibility":"Public","body":"inverted = invert(first)\npc_set = [normal_form, inverted.normal_form].sort.first\npc_set.transpose_to(0)\n"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of pitch classes","summary":"<p>Returns the number of pitch classes</p>","abstract":false,"location":{"filename":"src/mystic/pitch_class_set.cr","line_number":113,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L113"},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"pitch_classes.size"}},{"html_id":"sort:PitchClassSet-instance-method","name":"sort","doc":"Returns the pitch class set with pitch classes in ascending order","summary":"<p>Returns the pitch class set with pitch classes in ascending order</p>","abstract":false,"location":{"filename":"src/mystic/pitch_class_set.cr","line_number":128,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L128"},"def":{"name":"sort","return_type":"PitchClassSet","visibility":"Public","body":"PitchClassSet.new(pitch_classes.sort)"}},{"html_id":"t(i:Int32):PitchClassSet-instance-method","name":"t","doc":"Transpose (Tₙ)","summary":"<p>Transpose (Tₙ)</p>","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : PitchClassSet","args_html":"(i : Int32) : <a href=\"../Mystic/PitchClassSet.html\">PitchClassSet</a>","location":{"filename":"src/mystic/pitch_class_set.cr","line_number":143,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L143"},"def":{"name":"t","args":[{"name":"i","external_name":"i","restriction":"Int32"}],"return_type":"PitchClassSet","visibility":"Public","body":"self + i"}},{"html_id":"ti(i:Int32):PitchClassSet-instance-method","name":"ti","doc":"Inversion + Transpose (TₙI or Iₙ)","summary":"<p>Inversion + Transpose (TₙI or Iₙ)</p>","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : PitchClassSet","args_html":"(i : Int32) : <a href=\"../Mystic/PitchClassSet.html\">PitchClassSet</a>","location":{"filename":"src/mystic/pitch_class_set.cr","line_number":138,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L138"},"def":{"name":"ti","args":[{"name":"i","external_name":"i","restriction":"Int32"}],"return_type":"PitchClassSet","visibility":"Public","body":"invert + i"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/mystic/pitch_class_set.cr","line_number":195,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L195"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << pitch_class_values.to_s"}},{"html_id":"transpose_to(i:Int32)-instance-method","name":"transpose_to","doc":"Transpose set to begin with given pitch class value","summary":"<p>Transpose set to begin with given pitch class value</p>","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32)","args_html":"(i : Int32)","location":{"filename":"src/mystic/pitch_class_set.cr","line_number":133,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/pitch_class_set.cr#L133"},"def":{"name":"transpose_to","args":[{"name":"i","external_name":"i","restriction":"Int32"}],"visibility":"Public","body":"self + (i - first.value)"}}]},{"html_id":"mystic/Mystic/Scale","path":"Mystic/Scale.html","kind":"class","full_name":"Mystic::Scale","name":"Scale","abstract":false,"superclass":{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mystic/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mystic/scale.cr","line_number":13,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/scale.cr#L13"}],"repository_name":"mystic","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"SCALE_ALIASES","name":"SCALE_ALIASES","value":"{ionian: \"major\", aeolian: \"minor\", \"natural minor\": \"minor\"}"},{"id":"SCALE_INTERVALS","name":"SCALE_INTERVALS","value":"{major: [WS, WS, HS, WS, WS, WS], minor: [WS, HS, WS, WS, HS, WS], \"melodic minor\": [WS, HS, WS, WS, WS, WS], dorian: [WS, HS, WS, WS, WS, HS, WS], phrygian: [HS, WS, WS, WS, HS, WS, WS], lydian: [WS, WS, WS, HS, WS, WS, HS], mixolydian: [WS, WS, HS, WS, WS, HS, WS], locrian: [HS, WS, WS, HS, WS, WS, WS]}"}],"namespace":{"html_id":"mystic/Mystic","kind":"module","full_name":"Mystic","name":"Mystic"},"doc":"Represents a scale\n\nA scale consists of a tonic note, type, and array of `Interval`s.\n\nTo create a scale:\n```\n# C major scale\nScale.new(Note.new(\"C\"), \"major\")\n\n# Can create a custom scale by supplying the intervals\nScale.new(Note.new(\"C\"), \"my custom scale\", [Interval.new(\"M2\"), Interval.new(\"M3\")])\n```","summary":"<p>Represents a scale</p>","constructors":[{"html_id":"new(tonic:Mystic::Note,type:String,intervals:Array(Mystic::Interval))-class-method","name":"new","abstract":false,"args":[{"name":"tonic","external_name":"tonic","restriction":"::Mystic::Note"},{"name":"type","external_name":"type","restriction":"::String"},{"name":"intervals","external_name":"intervals","restriction":"::Array(::Mystic::Interval)"}],"args_string":"(tonic : Mystic::Note, type : String, intervals : Array(Mystic::Interval))","args_html":"(tonic : <a href=\"../Mystic/Note.html\">Mystic::Note</a>, type : String, intervals : Array(<a href=\"../Mystic/Interval.html\">Mystic::Interval</a>))","location":{"filename":"src/mystic/scale.cr","line_number":38,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/scale.cr#L38"},"def":{"name":"new","args":[{"name":"tonic","external_name":"tonic","restriction":"::Mystic::Note"},{"name":"type","external_name":"type","restriction":"::String"},{"name":"intervals","external_name":"intervals","restriction":"::Array(::Mystic::Interval)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(tonic, type, intervals)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(tonic_type:String,type:String)-class-method","name":"new","abstract":false,"args":[{"name":"tonic_type","external_name":"tonic_type","restriction":"String"},{"name":"type","external_name":"type","restriction":"::String"}],"args_string":"(tonic_type : String, type : String)","args_html":"(tonic_type : String, type : String)","location":{"filename":"src/mystic/scale.cr","line_number":50,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/scale.cr#L50"},"def":{"name":"new","args":[{"name":"tonic_type","external_name":"tonic_type","restriction":"String"},{"name":"type","external_name":"type","restriction":"::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(tonic_type, type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(tonic:Mystic::Note,type:String)-class-method","name":"new","abstract":false,"args":[{"name":"tonic","external_name":"tonic","restriction":"::Mystic::Note"},{"name":"type","external_name":"type","restriction":"::String"}],"args_string":"(tonic : Mystic::Note, type : String)","args_html":"(tonic : <a href=\"../Mystic/Note.html\">Mystic::Note</a>, type : String)","location":{"filename":"src/mystic/scale.cr","line_number":41,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/scale.cr#L41"},"def":{"name":"new","args":[{"name":"tonic","external_name":"tonic","restriction":"::Mystic::Note"},{"name":"type","external_name":"type","restriction":"::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(tonic, type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"+(interval:Interval):Scale-instance-method","name":"+","doc":"Returns a new scale transposed by the given *interval*","summary":"<p>Returns a new scale transposed by the given <em>interval</em></p>","abstract":false,"args":[{"name":"interval","external_name":"interval","restriction":"Interval"}],"args_string":"(interval : Interval) : Scale","args_html":"(interval : <a href=\"../Mystic/Interval.html\">Interval</a>) : <a href=\"../Mystic/Scale.html\">Scale</a>","location":{"filename":"src/mystic/scale.cr","line_number":77,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/scale.cr#L77"},"def":{"name":"+","args":[{"name":"interval","external_name":"interval","restriction":"Interval"}],"return_type":"Scale","visibility":"Public","body":"Scale.new(tonic + interval, type, intervals)"}},{"html_id":"intervals:Array(Interval)-instance-method","name":"intervals","abstract":false,"location":{"filename":"src/mystic/scale.cr","line_number":16,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/scale.cr#L16"},"def":{"name":"intervals","return_type":"Array(Interval)","visibility":"Public","body":"@intervals"}},{"html_id":"name(include_octave=false):String-instance-method","name":"name","doc":"Returns the name of the scale\n\nFor example: \"C major\"\n\nIf *include_octave* is true, will include the octave as part of the tonic note (e.g. \"C4 major\")","summary":"<p>Returns the name of the scale</p>","abstract":false,"args":[{"name":"include_octave","default_value":"false","external_name":"include_octave","restriction":""}],"args_string":"(include_octave = false) : String","args_html":"(include_octave = <span class=\"n\">false</span>) : String","location":{"filename":"src/mystic/scale.cr","line_number":72,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/scale.cr#L72"},"def":{"name":"name","args":[{"name":"include_octave","default_value":"false","external_name":"include_octave","restriction":""}],"return_type":"String","visibility":"Public","body":"\"#{include_octave ? tonic : tonic.letter} #{type}\""}},{"html_id":"note_names:Array(String)-instance-method","name":"note_names","doc":"Returns the note names","summary":"<p>Returns the note names</p>","abstract":false,"location":{"filename":"src/mystic/scale.cr","line_number":63,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/scale.cr#L63"},"def":{"name":"note_names","return_type":"Array(String)","visibility":"Public","body":"notes.map(&.name)"}},{"html_id":"notes:Array(Note)-instance-method","name":"notes","doc":"Returns the notes of the scale","summary":"<p>Returns the notes of the scale</p>","abstract":false,"location":{"filename":"src/mystic/scale.cr","line_number":55,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/scale.cr#L55"},"def":{"name":"notes","return_type":"Array(Note)","visibility":"Public","body":"intervals.reduce([tonic]) do |acc, interval|\n  new_note = acc.last + interval\n  acc.push(new_note)\nend"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/mystic/scale.cr","line_number":81,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/scale.cr#L81"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << name(include_octave: true)"}},{"html_id":"tonic:Note-instance-method","name":"tonic","abstract":false,"location":{"filename":"src/mystic/scale.cr","line_number":14,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/scale.cr#L14"},"def":{"name":"tonic","return_type":"Note","visibility":"Public","body":"@tonic"}},{"html_id":"type:String-instance-method","name":"type","abstract":false,"location":{"filename":"src/mystic/scale.cr","line_number":15,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/scale.cr#L15"},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"}}]},{"html_id":"mystic/Mystic/Util","path":"Mystic/Util.html","kind":"class","full_name":"Mystic::Util","name":"Util","abstract":false,"superclass":{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"mystic/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"mystic/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/mystic/util.cr","line_number":2,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/util.cr#L2"}],"repository_name":"mystic","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ACCIDENTAL_OFFSETS","name":"ACCIDENTAL_OFFSETS","value":"{\"#\": 1, x: 2, b: -1, \"♯\": 1, \"♭\": -1, \"𝄫\": -2, \"𝄪\": 2}"},{"id":"PERFECT_INTERVALS","name":"PERFECT_INTERVALS","value":"[1, 4, 5, 8]"}],"namespace":{"html_id":"mystic/Mystic","kind":"module","full_name":"Mystic","name":"Mystic"},"doc":"Miscellaneous utility methods","summary":"<p>Miscellaneous utility methods</p>","class_methods":[{"html_id":"accidental_offset(accidental:String):Int32-class-method","name":"accidental_offset","doc":"Return the number of alterations given an *accidental*","summary":"<p>Return the number of alterations given an <em>accidental</em></p>","abstract":false,"args":[{"name":"accidental","external_name":"accidental","restriction":"String"}],"args_string":"(accidental : String) : Int32","args_html":"(accidental : String) : Int32","location":{"filename":"src/mystic/util.cr","line_number":53,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/util.cr#L53"},"def":{"name":"accidental_offset","args":[{"name":"accidental","external_name":"accidental","restriction":"String"}],"return_type":"Int32","visibility":"Public","body":"accidental.chars.sum do |c|\n  ACCIDENTAL_OFFSETS.fetch(c.to_s, 0)\nend"}},{"html_id":"normalize_accidental(accidental_offset:Int32):String-class-method","name":"normalize_accidental","doc":"Return the proper accidental given a numerical *accidental_offset*","summary":"<p>Return the proper accidental given a numerical <em>accidental_offset</em></p>","abstract":false,"args":[{"name":"accidental_offset","external_name":"accidental_offset","restriction":"Int32"}],"args_string":"(accidental_offset : Int32) : String","args_html":"(accidental_offset : Int32) : String","location":{"filename":"src/mystic/util.cr","line_number":40,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/util.cr#L40"},"def":{"name":"normalize_accidental","args":[{"name":"accidental_offset","external_name":"accidental_offset","restriction":"Int32"}],"return_type":"String","visibility":"Public","body":"case accidental_offset\nwhen .negative?\n  \"b\" * accidental_offset.abs\nwhen 1\n  \"#\"\nwhen 2\n  \"x\"\nwhen 3\n  \"#x\"\nelse\n  \"#\" * accidental_offset\nend"}},{"html_id":"offset_to_quality(offset:Int32,is_perfect:Bool):String-class-method","name":"offset_to_quality","doc":"Return a quality corresponding to the *offset* (number of alterations) and whether it *is_perfect*","summary":"<p>Return a quality corresponding to the <em>offset</em> (number of alterations) and whether it <em>is_perfect</em></p>","abstract":false,"args":[{"name":"offset","external_name":"offset","restriction":"Int32"},{"name":"is_perfect","external_name":"is_perfect","restriction":"Bool"}],"args_string":"(offset : Int32, is_perfect : Bool) : String","args_html":"(offset : Int32, is_perfect : Bool) : String","location":{"filename":"src/mystic/util.cr","line_number":23,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/util.cr#L23"},"def":{"name":"offset_to_quality","args":[{"name":"offset","external_name":"offset","restriction":"Int32"},{"name":"is_perfect","external_name":"is_perfect","restriction":"Bool"}],"return_type":"String","visibility":"Public","body":"if offset == 0\n  if !is_perfect\n    raise(\"Cannot determine quality with 0 offset for imperfect interval\")\n  end\n  \"P\"\nelse\n  if offset < 0\n    if is_perfect\n      return \"d\" * offset.abs\n    end\n    offset == -1 ? \"m\" : \"d\" * (offset.abs - 1)\n  else\n    if is_perfect\n      return \"A\" * offset\n    end\n    offset == 1 ? \"M\" : \"A\" * (offset - 1)\n  end\nend"}},{"html_id":"perfect?(number:Int32):Bool-class-method","name":"perfect?","doc":"Return if given *number* is a perfect interval","summary":"<p>Return if given <em>number</em> is a perfect interval</p>","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int32"}],"args_string":"(number : Int32) : Bool","args_html":"(number : Int32) : Bool","location":{"filename":"src/mystic/util.cr","line_number":18,"url":"https://github.com/seanyeh/mystic.cr/blob/05ddf8f76dfe43de93df7b6e542ff36fbf8f4b8e/src/mystic/util.cr#L18"},"def":{"name":"perfect?","args":[{"name":"number","external_name":"number","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"PERFECT_INTERVALS.includes?(number.abs % 7)"}}]}]}]}})